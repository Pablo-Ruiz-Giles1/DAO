[{"/home/pablo/Desktop/DAO/dapp/src/index.js":"1","/home/pablo/Desktop/DAO/dapp/src/drizzle.js":"2","/home/pablo/Desktop/DAO/dapp/src/components/App.js":"3","/home/pablo/Desktop/DAO/dapp/src/components/Loading.js":"4","/home/pablo/Desktop/DAO/dapp/src/components/NoMatch.js":"5","/home/pablo/Desktop/DAO/dapp/src/components/Layout.js":"6","/home/pablo/Desktop/DAO/dapp/src/components/Cuenta.js":"7","/home/pablo/Desktop/DAO/dapp/src/components/home/HomePage.js":"8","/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyAdmin.js":"9","/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyTraductor.js":"10","/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyCompany.js":"11","/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyPage.js":"12","/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorPage.js":"13","/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyDetail.js":"14","/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorDetail.js":"15","/home/pablo/Desktop/DAO/dapp/src/components/Navegacion.js":"16","/home/pablo/Desktop/DAO/dapp/src/components/Header.js":"17","/home/pablo/Desktop/DAO/dapp/src/components/company/CreateCompany.js":"18","/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyList/index.js":"19","/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorList/index.js":"20","/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyList/CompanyHead.js":"21","/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyList/CompanyBody.js":"22","/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorList/TraductorHead.js":"23","/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorList/TraductorBody.js":"24","/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyList/CompanyRow.js":"25","/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorList/TraductorRow.js":"26","/home/pablo/Desktop/DAO/dapp/src/components/ipfs/Ipfsreact.js":"27","/home/pablo/Desktop/DAO/dapp/src/components/ipfs/watchipfs.js":"28","/home/pablo/Desktop/DAO/dapp/src/components/ipfs/oneipfs.js":"29","/home/pablo/Desktop/DAO/dapp/src/components/traductor/traductortip.js":"30","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daopage.js":"31","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/index.js":"32","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/Daohead.js":"33","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/Daobody.js":"34","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/Daowatch.js":"35","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/Daovotar.js":"36","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/propose/Daopropose.js":"37","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/propose/DaoTraductorRow.js":"38","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/propose/Daopropose2.js":"39","/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyNadie.js":"40","/home/pablo/Desktop/DAO/dapp/src/components/traductor/CreateTraductor.js":"41","/home/pablo/Desktop/DAO/dapp/src/components/company/tokens/TokenCompanybody.js":"42","/home/pablo/Desktop/DAO/dapp/src/components/company/tokens/TokenCompanyRow.js":"43","/home/pablo/Desktop/DAO/dapp/src/components/company/tokens/TokenCompanyswitch.js":"44","/home/pablo/Desktop/DAO/dapp/src/components/company/Companydelete/ADMINCompanybody.js":"45","/home/pablo/Desktop/DAO/dapp/src/components/company/Companydelete/ADMINCompanyRow.js":"46","/home/pablo/Desktop/DAO/dapp/src/components/company/Companydelete/ADMINCompanydelete.js":"47","/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyAlguien.js":"48"},{"size":493,"mtime":1689329652511,"results":"49","hashOfConfig":"50"},{"size":1067,"mtime":1693591228114,"results":"51","hashOfConfig":"50"},{"size":2469,"mtime":1689956041887,"results":"52","hashOfConfig":"50"},{"size":792,"mtime":1693591181489,"results":"53","hashOfConfig":"50"},{"size":491,"mtime":1689331125481,"results":"54","hashOfConfig":"50"},{"size":266,"mtime":1689955961955,"results":"55","hashOfConfig":"50"},{"size":1402,"mtime":1693594185874,"results":"56","hashOfConfig":"50"},{"size":122,"mtime":1689956080107,"results":"57","hashOfConfig":"50"},{"size":551,"mtime":1689444322563,"results":"58","hashOfConfig":"50"},{"size":932,"mtime":1689518329145,"results":"59","hashOfConfig":"50"},{"size":911,"mtime":1689518366930,"results":"60","hashOfConfig":"50"},{"size":616,"mtime":1689952021788,"results":"61","hashOfConfig":"50"},{"size":741,"mtime":1689934431389,"results":"62","hashOfConfig":"50"},{"size":1009,"mtime":1689950398657,"results":"63","hashOfConfig":"50"},{"size":1223,"mtime":1693593666270,"results":"64","hashOfConfig":"50"},{"size":695,"mtime":1689602152363,"results":"65","hashOfConfig":"50"},{"size":166,"mtime":1689331173617,"results":"66","hashOfConfig":"50"},{"size":1390,"mtime":1689690321274,"results":"67","hashOfConfig":"50"},{"size":330,"mtime":1689521639898,"results":"68","hashOfConfig":"50"},{"size":343,"mtime":1689934096758,"results":"69","hashOfConfig":"50"},{"size":136,"mtime":1689522240797,"results":"70","hashOfConfig":"50"},{"size":502,"mtime":1689521780938,"results":"71","hashOfConfig":"50"},{"size":140,"mtime":1689522580463,"results":"72","hashOfConfig":"50"},{"size":518,"mtime":1689522622667,"results":"73","hashOfConfig":"50"},{"size":640,"mtime":1689525416286,"results":"74","hashOfConfig":"50"},{"size":656,"mtime":1689525427813,"results":"75","hashOfConfig":"50"},{"size":7795,"mtime":1693582597034,"results":"76","hashOfConfig":"50"},{"size":895,"mtime":1689696656482,"results":"77","hashOfConfig":"50"},{"size":3595,"mtime":1693585706879,"results":"78","hashOfConfig":"50"},{"size":1869,"mtime":1689840104096,"results":"79","hashOfConfig":"50"},{"size":598,"mtime":1689930751489,"results":"80","hashOfConfig":"50"},{"size":284,"mtime":1689841936519,"results":"81","hashOfConfig":"50"},{"size":152,"mtime":1689845322072,"results":"82","hashOfConfig":"50"},{"size":693,"mtime":1689888446140,"results":"83","hashOfConfig":"50"},{"size":4056,"mtime":1691518606462,"results":"84","hashOfConfig":"50"},{"size":3021,"mtime":1693406831980,"results":"85","hashOfConfig":"50"},{"size":1245,"mtime":1689950069859,"results":"86","hashOfConfig":"50"},{"size":685,"mtime":1689888634856,"results":"87","hashOfConfig":"50"},{"size":6810,"mtime":1693322084079,"results":"88","hashOfConfig":"50"},{"size":1641,"mtime":1689934351550,"results":"89","hashOfConfig":"50"},{"size":1268,"mtime":1689934534069,"results":"90","hashOfConfig":"50"},{"size":1277,"mtime":1689950458322,"results":"91","hashOfConfig":"50"},{"size":685,"mtime":1689950549946,"results":"92","hashOfConfig":"50"},{"size":3001,"mtime":1693232770623,"results":"93","hashOfConfig":"50"},{"size":1338,"mtime":1689952792413,"results":"94","hashOfConfig":"50"},{"size":772,"mtime":1689953169340,"results":"95","hashOfConfig":"50"},{"size":2342,"mtime":1689953673802,"results":"96","hashOfConfig":"50"},{"size":1698,"mtime":1689955797900,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1fwf6m6",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"100"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"100"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"100"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"/home/pablo/Desktop/DAO/dapp/src/index.js",[],["215","216"],"/home/pablo/Desktop/DAO/dapp/src/drizzle.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/App.js",["217","218","219"],"import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport '../css/App.css';\nimport Loading from './Loading';\n\nimport Layout from './Layout';\nimport HomePage from './home/HomePage';\n\n//import CustomersPage from \"./customers/CustomersPage\";\n//import InterpretesPage from \"./interpretes/InterpretesPage\";\n//import InterpreteDetail from \"./interpretes/InterpreteDetail\";\n//import ProposesPage from \"./proposes/ProposesPage\";\n//import MisCosasPage from \"./misCosas/MisCosasPage\";\n\nimport NoMatch from './NoMatch';\n\nimport Cuenta from './Cuenta';\n\nimport SoyAdmin from \"./roles/SoyAdmin\";\nimport SoyTraductor from \"./roles/SoyTraductor\";\nimport SoyCompany from \"./roles/SoyCompany\";\n\nimport SoyAlguien from \"./roles/SoyAlguien\";\n\n//import IPFS from 'ipfs-core' \n\n\n\nimport CompanyPage from \"./company/CompanyPage\";\nimport TraductorPage from \"./traductor/TraductorPage\";\n\nimport CompanyDetail from \"./company/CompanyDetail\";\nimport TraductorDetail from \"./traductor/TraductorDetail\";\n\nimport Ipfsreact from \"./ipfs/Ipfsreact\";\nimport Daopage from \"./dao/Daopage\";\n\n\nimport Daovotar from \"./dao/Daolist/Daovotar\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\n            <Loading>\n            \n                       \n            <BrowserRouter>\n                    <Routes>\n                    \n                        <Route path=\"/\" element={<Layout/>}>\n                        <Route index element={<SoyAlguien><HomePage/></SoyAlguien>}/>\n                        \n                        <Route path=\"company\" element={<SoyAlguien><CompanyPage /> </SoyAlguien>} />\n                         <Route path=\"Company/:addr\" element={<CompanyDetail />} />\n                         <Route path=\"videos\" element={<SoyAlguien><Ipfsreact /></SoyAlguien>} />\n                         <Route path=\"traductores\" element={<TraductorPage />} />\n                         <Route path=\"miscosas\" element={<SoyAlguien><Cuenta /></SoyAlguien>} />\n                         <Route path=\"propuestas\" element={<SoyAlguien><Daopage /></SoyAlguien>} />\n                         <Route path=\"dao/:index\" element={<SoyAlguien><Daovotar /></SoyAlguien>} />\n                         <Route path=\"Traductor/:addr\" element={<TraductorDetail />} />\n                        <Route path=\"*\" element={<NoMatch/>}/>\n                        </Route>\n                    </Routes>\n                </BrowserRouter>\n            </Loading>\n        </div>\n    );\n}\n\nexport default App;\n","/home/pablo/Desktop/DAO/dapp/src/components/Loading.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/NoMatch.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/Layout.js",["220"],"import { Outlet } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport Navegacion from \"./Navegacion\";\n\nfunction Layout() {\n    return (\n        <>\n            \n            <Navegacion />\n            <Outlet />\n        </>\n    );\n}\n\nexport default Layout;","/home/pablo/Desktop/DAO/dapp/src/components/Cuenta.js",["221","222"],"/home/pablo/Desktop/DAO/dapp/src/components/home/HomePage.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyAdmin.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyTraductor.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyCompany.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyPage.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorPage.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyDetail.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorDetail.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/Navegacion.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/Header.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/company/CreateCompany.js",["223","224"],"import { useState } from \"react\";\nimport { drizzleReactHooks } from '@drizzle/react-plugin'\n\nconst { useDrizzle } = drizzleReactHooks;\n\n\n\nconst CreateCompany = () => {\n    const { drizzle } = useDrizzle();\n    const [setLastStackID] = useState(undefined)\n    // Conservar los valores metidos en el formulario\n    \n     \n\n    let [nombre, setNombre] = useState(\"\");\n    \n    let [direccion, setDireccion] = useState(\"\");\n\n    return (<article className=\"AppMisDatos\">\n\n        <h3>Añadir Compañía</h3>\n        <form>\n            <p> Nombre de la empresa: &nbsp;\n                <input key=\"nombre\" type=\"text\" name=\"nombre\" value={nombre} placeholder=\"Nombre\"\n                    onChange={ev => setNombre(ev.target.value)} /> </p>\n            <p> Dirección de la empresa: &nbsp;\n                <input key=\"direccion\" type=\"address\" name=\"direccion\" value={direccion} placeholder=\"0x0000\"\n                    onChange={ev => setDireccion(ev.target.value)} /> </p>\n\n            <button key=\"submit\" className=\"pure-button\" type=\"button\"\n                onClick={ev => {\n                    ev.preventDefault();\n                    const stackId = drizzle.contracts.Traductores.methods.createCompany.cacheSend(nombre, direccion);\n                  //  setLastStackID(stackId);\n                }}>Añadir Empresa</button>\n        </form>\n\n    </article>);\n\n};\nexport default CreateCompany;","/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyList/index.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorList/index.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyList/CompanyHead.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyList/CompanyBody.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorList/TraductorHead.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorList/TraductorBody.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/company/CompanyList/CompanyRow.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/traductor/TraductorList/TraductorRow.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/ipfs/Ipfsreact.js",["225","226","227","228","229"],"import { create } from 'ipfs-http-client';\nimport React, { useState } from \"react\";\nimport { useEffect } from 'react';\n\nimport Dropzone from \"react-dropzone\";\nimport axios from \"axios\";\n\n\n\n\n\nimport { drizzleReactHooks } from '@drizzle/react-plugin'\n\nconst {useDrizzle, useDrizzleState} = drizzleReactHooks;\n\nconst ipfs = create({ host: \"localhost\", port: 5001, protocol: \"http\" });\n\nconst Ipfsreact = () => {\n  const { useCacheCall } = useDrizzle();\n  const { drizzle } = useDrizzle();\n  const [setLastStackID] = useState(undefined)\n  \n  const drizzleState = useDrizzleState(state => state);\n\n  const address = drizzleState.accounts[0];\n\n  const [hash, setHash] = useState(\"\");\n  const [isHashAvailable, setIsHashAvailable] = useState(0);\n  const [fileBuffer, setFileBuffer] = useState(null);\n  const [previewURL, setPreviewURL] = useState(\"\");\n  const [imageName, setImageName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  let [direccion, setDireccion] = useState(\"\");\n\n//Variables para enviar al contrato\nconst [nameToSubmit, setnameToSubmit] = useState(\"\");\nconst [descriptionToSubmit, setdescriptionToSubmit] = useState(\"\");\nconst [priceToSubmit, setpriceToSubmit] = useState(\"\");\nconst [addressToSubmit, setaddressToSubmit] = useState(\"\");\n\n\nconst [fileType, setFileType] = useState(\"\"); // Variable to store the file type (0: image, 1: video, 2: audio)\n\n  // Efecto para verificar si hash está disponible\nuseEffect(() => {\n  if (hash !== \"\") {\n    setIsHashAvailable(1); // Cambiar el valor de isHashAvailable a 1 cuando hash no sea una cadena vacía.\n  }\n  else{\n    setIsHashAvailable(0); // Cambiar el valor de isHashAvailable a 1 cuando hash no sea una cadena vacía.\n  }\n}, [hash]);\n\n\n// Efecto para ejecutar acciones cuando hash está disponible (isHashAvailable === 1)\nuseEffect(() => {\n  if (isHashAvailable === 1) {\n    console.log(\"Imagen:\", nameToSubmit);\n    console.log(\"Descripción:\", descriptionToSubmit);\n    console.log(\"Precio:\", priceToSubmit);\n    console.log(\"Dirección:\", addressToSubmit);\n    console.log(\"CID:\", hash);\n    console.log(\"Formato del archivo:\", fileType);\n    createNFT();\n    // const stackId = drizzle.contracts.NFTContract.methods.createNFT.cacheSend(nameToSubmit, hash, descriptionToSubmit, priceToSubmit, addressToSubmit);\n    // setLastStackID(stackId);\n  }\n}, [isHashAvailable]);\n\n\n\nconst handleDrop = async (acceptedFiles) => {\n  try {\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = async () => {\n      const buffer = Buffer.from(reader.result); // Convert the buffer to Buffer\n      setFileBuffer(buffer);\n      setPreviewURL(URL.createObjectURL(file));\n\n      // Determine the file type based on the file's extension\n      \n      \n        const extension = file.name.split('.').pop().toLowerCase();\n        console.log(\"Extension:\", extension);\n        if (extension === 'jpg' || extension === 'jpeg' || extension === 'gif' || extension === 'png') {\n          setFileType(0); // Image\n        } else if (extension === 'mp4' || extension === 'avi' || extension === 'mkv' || extension === 'mov' || extension === 'wmv' || extension === 'flv' || extension === 'webm' || extension === 'm4v' || extension === '3gp') {\n          setFileType(1); // Video\n        } else if (extension === 'ogg' || extension === 'wav' || extension === 'mp3') {\n          setFileType(2); // Audio\n        } else {\n          setFileType(0); // Unknown file type\n        }\n     \n    };\n  } catch (error) {\n    console.error(\"Error reading the file:\", error);\n  }\n};\n\n  const uploadToIPFS = async () => {\n    try {\n      const { cid } = await ipfs.add(fileBuffer);\n      setHash(cid.toString());\n    } catch (error) {\n      console.error(\"Error uploading to IPFS:\", error);\n    }\n  };\n\n  const getFileFromIPFS = async () => {\n    try {\n      if (!hash) return;\n\n      const response = await axios.get(`https://ipfs.io/ipfs/${hash}`);\n      console.log(\"File content from IPFS:\", response.data);\n    } catch (error) {\n      console.error(\"Error fetching file from IPFS:\", error);\n    }\n  };\n\n\n// Función que se ejecuta cuando se rellena el formulario\nconst handleSubmit = (event) => {\n  event.preventDefault();\n  // Asegurarse de que imageName tenga un valor predeterminado de \"NFT\" si está vacío.\n const  nameToSubmit1 = imageName.trim() === \"\" ? \"NFT\" : imageName;\n\n  // Asegurarse de que description tenga un valor predeterminado de \"NFT de traducción\" si está vacío.\n  const descriptionToSubmit1 = description.trim() === \"\" ? \"NFT de traducción\" : description;\n\n  // Asegurarse de que price tenga un valor predeterminado de \"1\" si está vacío.\n  const priceToSubmit1 = price.trim() === \"\" ? 1 : price;\n\n  // Asegurarse de que direccion tenga un valor predeterminado de la persona que lo crea si está vacío.\n  const  addressToSubmit1 = direccion.trim() === \"\" ? address : direccion;\n\n  setnameToSubmit(nameToSubmit1);\n  setdescriptionToSubmit(descriptionToSubmit1);\n  setpriceToSubmit(priceToSubmit1);\n  setaddressToSubmit(addressToSubmit1);\n  // Aquí puedes hacer lo que desees con los datos del formulario, por ejemplo, enviarlos a un contrato inteligente o a una API.\n  console.log(\"Entramos\");\n  // Subir a IPFS y esperar hasta que se complete la operación.\n  uploadToIPFS();\n  //SE activan los USeEffect\n};\n\n\n\n  const createNFT = async () => {\n    try {\n      console.log(\"CID de createNFT:\", hash);\n      const stackId = drizzle.contracts.NFTContract.methods.createNFT.cacheSend(\n        nameToSubmit,\n        hash,\n        descriptionToSubmit,\n        Number(priceToSubmit),\n        addressToSubmit,\n        fileType\n      );\n      setHash(\"\");\n     // setLastStackID(stackId);\n    } catch (error) {\n      console.error(\"Error uploading to IPFS:\", error);\n    }\n  };\n\n\n  return (\n    <tbody>\n      <div className=\"App\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n        <h1>Subir contenido a IPFS</h1>\n        <Dropzone onDrop={handleDrop}>\n          {({ getRootProps, getInputProps }) => (\n            <div {...getRootProps({ className: \"dropzone\" })} style={{\n              backgroundColor: 'blue',\n              border: '2px dashed white',\n              borderRadius: '5px',\n              padding: '20px',\n              textAlign: 'center',\n              color: 'white',\n              cursor: 'pointer',\n            }}>\n              <input {...getInputProps()} />\n              <p>Arrastre y suelte un archivo aquí, o haga clic para seleccionarlo</p>\n              {previewURL && <img src={previewURL} alt=\"Preview\" style={{ maxWidth: '100%', marginTop: '10px' }} />}\n            </div>\n          )}\n        </Dropzone>\n\n        <div style={{ width: '100%' }}>\n          <h2>Información de la imagen:</h2>\n          <form onSubmit={handleSubmit} >\n          <p> Nombre de la imagen: &nbsp;\n              <input type=\"text\" value={imageName} onChange={(e) => setImageName(e.target.value)} />\n              </p>\n\n              <p> \n              Descripción: &nbsp;\n              <textarea value={description} onChange={(e) => setDescription(e.target.value)} />\n            </p>\n\n            <p> \n              Precio: &nbsp;\n              <input type=\"number\" value={price} onChange={(e) => setPrice(e.target.value)} />\n              </p>\n\n              <p> Dirección del creador: &nbsp;\n                <input key=\"direccion\" type=\"address\" name=\"direccion\" value={direccion} placeholder=\"0x0000\"\n                    onChange={ev => setDireccion(ev.target.value)} /> </p>\n            <button type=\"submit\" disabled={!fileBuffer}>Guardar información</button>\n          </form>\n        </div>\n      </div>\n    </tbody>\n  );\n};\n\nexport default Ipfsreact;\n","/home/pablo/Desktop/DAO/dapp/src/components/ipfs/watchipfs.js",["230"],"import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport Oneipfs from './oneipfs';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst Watchipfs = ({ children, address }) => { // Agregamos \"address\" como prop\n  const { useCacheCall } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n\n  // Utilizamos el prop \"address\" que se pasa como parámetro\n  const nftsidResponse = useCacheCall(\"NFTContract\", \"getNFTsByOwner\", address) || [];\n\n  console.log(\"Valor de nftsidResponse\", nftsidResponse);\n  \n  // Utiliza el método map para separar cada valor y llamar al componente Oneipfs\n  const renderedRows = nftsidResponse.map((nftsidValue, index) => (\n    <Oneipfs key={\"ab-\" + index} nftsid={nftsidValue} address={address}/>\n  ));\n\n  return (\n    <tbody>\n      <h3>NFT holdeados</h3>\n      {renderedRows}\n    </tbody>\n  );\n};\n\nexport default Watchipfs;\n","/home/pablo/Desktop/DAO/dapp/src/components/ipfs/oneipfs.js",["231"],"import React from \"react\";\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst IPFS_BASE_URL = \"https://ipfs.io/ipfs/\";\n\nconst Oneipfs = ({ nftsid , address}) => {\n  const { useCacheCall } = useDrizzle();\n  const { drizzle } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const addr = drizzleState.accounts[0];\n  let data = useCacheCall(\"NFTContract\", \"_nftMetadata\", nftsid);\n  console.log(\"data\", data);\n\n\n\n  console.log(\"ID NFT\", nftsid);\n  console.log(\"Address:\", address);\n\n  const renderContent = () => {\n    if (!data) {\n      return <p>Loading...</p>;\n    }\n\n    switch (data.format) {\n      case \"0\":\n        return (\n          <>\n            <img\n              src={IPFS_BASE_URL + data.cid}\n              alt=\"Imagen IPFS\"\n              style={{ width: \"200px\", height: \"200px\" }}\n            />\n            <table>\n              <tbody>\n                <tr>\n                  <th>A<sub>{nftsid}</sub></th>\n                  <td>{data.name}</td>\n                </tr>\n                <tr>\n                  <th>Descripción</th>\n                  <td>{data.description}</td>\n                </tr>\n                <tr>\n                  <th>Creator</th>\n                  <td>{data.creator}</td>\n                </tr>\n                <tr>\n                  <th>Precio</th>\n                  <td>{data.price}</td>\n                </tr>\n              </tbody>\n            </table>\n          </>\n        );\n      case \"1\":\n        return (\n          <>\n            <video\n              controls\n              src={IPFS_BASE_URL + data.cid}\n              style={{ width: \"200px\", height: \"200px\" }}\n            />\n            <table>\n              <tbody>\n                <tr>\n                  <th>A<sub>{nftsid}</sub></th>\n                  <td>{data.name}</td>\n                </tr>\n                <tr>\n                  <th>Descripción</th>\n                  <td>{data.description}</td>\n                </tr>\n                <tr>\n                  <th>Creator</th>\n                  <td>{data.creator}</td>\n                </tr>\n                <tr>\n                  <th>Precio</th>\n                  <td>{data.price}</td>\n                </tr>\n              </tbody>\n            </table>\n          </>\n        );\n      case \"2\":\n        return (\n          <>\n            <audio\n              controls\n              src={IPFS_BASE_URL + data.cid}\n            />\n            <table>\n              <tbody>\n                <tr>\n                  <th>A<sub>{nftsid}</sub></th>\n                  <td>{data.name}</td>\n                </tr>\n                <tr>\n                  <th>Descripción</th>\n                  <td>{data.description}</td>\n                </tr>\n                <tr>\n                  <th>Creator</th>\n                  <td>{data.creator}</td>\n                </tr>\n                <tr>\n                  <th>Precio</th>\n                  <td>{data.price}</td>\n                </tr>\n              </tbody>\n            </table>\n          </>\n        );\n      default:\n        return <p>Formato desconocido</p>;\n    }\n  };\n\n  return (\n    \n    <>\n      {renderContent()\n      }\n      {addr !== address && (\n        <button key=\"submit\" className=\"pure-button\" type=\"button\"\n        onClick={ev => {\n            ev.preventDefault();\n\n            const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(Number(nftsid), addr);\n         //   setLastStackID(stackId);\n        }}>Comprar</button>\n      )}\n    </>\n  );\n};\n\nexport default Oneipfs;\n","/home/pablo/Desktop/DAO/dapp/src/components/traductor/traductortip.js",["232","233","234","235","236"],"import React, { useState } from \"react\";\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport { useParams, Link } from \"react-router-dom\";\n\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\n\nconst Traductortip = () => {\n    const { useCacheCall } = useDrizzle();\n    const { drizzle } = useDrizzle();\n    let { addr } = useParams();\n    const datos = useCacheCall(\"Traductores\", \"datosHolders\", addr);\n    const tokens = useCacheCall(\"GovernanceToken\", \"balanceOf\", addr);\n    const drizzleState = useDrizzleState(state => state);\n    const address = drizzleState.accounts[0];\n    // State para el número ingresado en la casilla\n    const [inputNumber, setInputNumber] = useState(\"\");\n\n    // Función para manejar el cambio en la casilla de entrada\n    const handleInputChange = (event) => {\n        const value = parseInt(event.target.value, 10);\n        setInputNumber(value);\n    };\n\n    // Función para desbloquear el botón\n    const isButtonEnabled = inputNumber >= 1 && inputNumber <= 50;\n\n    return (\n        <>\n           \n\n            {/* Casilla de entrada */}\n            <label>\n                Valoración\n                <input type=\"number\" value={inputNumber} onChange={handleInputChange} min={1} max={10} />\n            </label>\n\n            {/* Botón desbloqueado si se ingresa un número válido */}\n            {isButtonEnabled && (\n                <button\n                                    onClick={ev => {\n                                        ev.preventDefault();\n                                        const stackId = drizzle.contracts.GovernanceToken.methods.mintCompany.cacheSend(addr, inputNumber);\n                                    }}\n                >\n                    Recompensa\n                </button>\n            )}\n\n           \n\n            \n        </>\n    );\n};\n\nexport default Traductortip;\n","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daopage.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/index.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/Daohead.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/Daobody.js",["237"],"import { drizzleReactHooks } from '@drizzle/react-plugin'\n\n\n\nimport Daowatch from \"./Daowatch\"; \n\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst Daobody = ({children}) => {\n\n    const {useCacheCall} = useDrizzle();\n    const drizzleState = useDrizzleState(state => state);\n\n    const addr = drizzleState.accounts[0];\n    const balance = drizzleState.accountBalances[addr];\n    \n    \n\n\n\n  \n    const proposesLength = useCacheCall(\"GovernorContract\", \"s_proposalCount\") || 0;\n\n\n \n\n  let rows = [];\n  for (let i = 0; i < proposesLength; i++) {\n      rows.push(<Daowatch key={\"ab-\" + i} DaoIndex={i} />);\n  }\n  return <tbody>{rows}</tbody>;\n\n\n\n \n   \n\n};\nexport default Daobody;","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/Daowatch.js",["238","239","240","241","242","243"],"import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport { Link } from 'react-router-dom';\nimport web3 from 'web3';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst Daowatch = ({ DaoIndex }) => {\n  const { useCacheCall } = useDrizzle();\n  const drizzleState = useDrizzleState((state) => state);\n  const { drizzle } = useDrizzle();\n  const address = drizzleState.accounts[0];\n  const balance = drizzleState.accountBalances[address];\n\n  \n\n  const oz_states = [\n    'Pending',\n    'Active',\n    'Canceled',\n    'Defeated',\n    'Succeeded',\n    'Queued',\n    'Expired',\n    'Executed',\n  ];\n\n  // Función para obtener el estado basado en el valor de propState\n  const getPropState = (propState) => {\n    return oz_states[propState] || 'Unknown'; // Devolvemos el estado correspondiente o 'Unknown' si no se encuentra\n  };\n\n  let { addr, datos, propState, proposalData } = useCacheCall(\n    ['GovernorContract'],\n    (call) => {\n      const addr = call('GovernorContract', 'proposes', DaoIndex);\n      const datos = addr && call('GovernorContract', 'datosPropose', addr);\n      const propState = addr && datos && call('GovernorContract', 'state', datos.id);\n      const proposalData= addr && datos && propState && call('GovernorContract', 'datosPropose', datos.id);\n      return { addr, datos, propState, proposalData };\n    }\n  );\n    \n    \n  // Renderizar el elemento apropiado basado en propState\n  const renderActionElement = () => {\n    if (propState == 1 || propState == 0) {\n      // Estado \"Active\"\n      return <Link to={`/dao/${DaoIndex}`}>Votar</Link>;\n    } \n    \n    else if (propState == 4) {\n      // Estado \"Succeeded\"\n      return <button onClick={ejecutarPropuesta}>Poner en cola</button>;\n    }\n    else if (propState == 5) {\n      // Estado \"Succeeded\"\n      return <button onClick={ejecutarPropuesta2}>Ejecutar</button>;\n    }\n     else {\n      return (null);\n    }\n  };\n\n// Función para ejecutar la propuesta (llamar a la función \"ejecutarPropuesta\" según tu contrato)\nconst ejecutarPropuesta = async () => {\n  try {\n    // Lógica para ejecutar la propuesta aquí, según el contrato\n    const queueTx = drizzle.contracts.GovernorContract.methods.queue.cacheSend(\n      [proposalData.targets],\n      [0],\n      [proposalData.calldatas],\n      web3.utils.sha3(proposalData.description)\n    );\n\n    // Espera a que la primera transacción se complete antes de continuar con la segunda\n    await queueTx;\n\n\n  } catch (error) {\n    console.log('Error al ejecutar la propuesta:', error);\n  }\n};\n\n\n\n\n// Función para ejecutar la propuesta (llamar a la función \"ejecutarPropuesta\" según tu contrato)\nconst ejecutarPropuesta2 = async () => {\n  try {\n\n    const executeTx = drizzle.contracts.GovernorContract.methods.execute.cacheSend(\n      [proposalData.targets],\n      [0],\n      [proposalData.calldatas],\n      web3.utils.sha3(proposalData.description)\n    );\n\n    // Espera a que la segunda transacción se complete antes de continuar con el resto de la lógica\n    await executeTx;\n  } catch (error) {\n    console.log('Error al ejecutar la propuesta:', error);\n  }\n};\n\n  /*\n  // Función para ejecutar la propuesta (llamar a la función \"ejecutarPropuesta\" según tu contrato)\n  const ejecutarPropuesta = async () => {\n    try {\n      // Lógica para ejecutar la propuesta aquí, según el contrato\n      const queueTx = drizzle.contracts.GovernorContract.methods.queue.cacheSend([proposalData.targets],[0],[proposalData.calldatas], web3.utils.sha3(proposalData.description));\n\n\n      const executeTx = drizzle.contracts.GovernorContract.methods.execute.cacheSend([proposalData.targets],[0],[proposalData.calldatas], web3.utils.sha3(proposalData.description));\n\n\n    } catch (error) {\n      console.log('Error al ejecutar la propuesta:', error);\n    }\n  };\n\n*/\n\n\n\n\n\n  return (\n    <tr key={'Dao-' + DaoIndex}>\n      <th>A<sub>{DaoIndex}</sub></th>\n      <td>{datos?.description}</td>\n      <td>{getPropState(propState)}</td>\n      <td>{renderActionElement()}</td>\n    </tr>\n  );\n};\n\nexport default Daowatch;\n","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/Daovotar.js",["244","245","246","247"],"import React, { useState } from 'react';\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport { useParams, Link } from 'react-router-dom';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst Daovotar = ({ children }) => {\n  const { useCacheCall, useCacheSend } = useDrizzle(); // Agregamos useCacheSend para poder enviar transacciones\n  const drizzleState = useDrizzleState((state) => state);\n\n\n  const { drizzle } = useDrizzle();\n\n \n\n\n  let { index } = useParams();\n\n  // Creamos un estado local para almacenar la selección del usuario (1 o 0) y el valor del cuadro de texto\n  const [voto, setVoto] = useState(null);\n  const [cuadroTexto, setCuadroTexto] = useState('');\n\n  let { addr, datos, proposalData } = useCacheCall(\n    ['GovernorContract'],\n    (call) => {\n      const addr = call('GovernorContract', 'proposes', index);\n      const datos = addr && call('GovernorContract', 'datosPropose', addr);\n      const proposalData = addr && datos && call('GovernorContract', 'datosPropose', datos.id);\n      return { addr, datos, proposalData };\n    }\n  );\n\n  // Función para manejar el envío del voto\n  const handleVotoSubmit = (event) => {\n    event.preventDefault();\n\n    // Verificamos que se haya seleccionado una opción y se haya rellenado el cuadro de texto\n    if (voto !== null && cuadroTexto.trim() !== '') {\n      console.log(\"Voto:\", voto);\n      console.log(\"Texto del cuadro:\", cuadroTexto);\n\n      const proposeTx = drizzle.contracts.GovernorContract.methods.castVoteWithReason.cacheSend(datos.id,voto,cuadroTexto);\n\n\n      // Reiniciamos los estados para la próxima votación\n      setVoto(null);\n      setCuadroTexto(\"\");\n    }\n  };\n\n  return (\n    <>\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <h3 style={{ marginRight: '20px' }}>Votar Propuesta</h3>\n        <h5>Descripción:     <br></br></h5>\n        <p></p>\n        <p>   {proposalData?.description}</p>\n      </div>\n      <form onSubmit={handleVotoSubmit}>\n        <label>\n          <input\n            type=\"radio\"\n            value={1}\n            checked={voto === 1}\n            onChange={(e) => setVoto(parseInt(e.target.value))}\n          />\n          A favor\n        </label>\n\n        <label>\n          <input\n            type=\"radio\"\n            value={0}\n            checked={voto === 0}\n            onChange={(e) => setVoto(parseInt(e.target.value))}\n          />\n          En contra\n        </label>\n\n        {/* Agregamos un cuadro de texto */}\n        <input\n          type=\"text\"\n          value={cuadroTexto}\n          onChange={(e) => setCuadroTexto(e.target.value)}\n          placeholder=\"Escribe tu voto aquí\"\n        />\n\n        {/* Deshabilitamos el botón hasta que se haya seleccionado una opción y se haya rellenado el cuadro de texto */}\n        <button type=\"submit\" disabled={voto === null || cuadroTexto.trim() === ''}>\n          Enviar Voto\n        </button>\n      </form>\n      <Link to=\"/propuestas\">Volver</Link>\n    </>\n  );\n};\n\nexport default Daovotar;\n","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/propose/Daopropose.js",["248","249","250","251","252"],"import React, { useState, useEffect } from 'react';\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport { useParams, Link } from 'react-router-dom';\n\n\nimport Daopropose2 from './Daopropose2';\nimport DaoTraductorRow from './DaoTraductorRow';\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst Daopropose = ({ children }) => {\n  const { useCacheCall, useCacheSend } = useDrizzle();\n  const drizzleState = useDrizzleState((state) => state);\n\n  const addr = drizzleState.accounts[0];\n  const balance = drizzleState.accountBalances[addr];\n\n  const [sharedData, setSharedData] = useState({});\n\n  const handleDataChange = (traductorIndex, newData1, newData2) => {\n    setSharedData((prevData) => ({\n      ...prevData,\n      [traductorIndex]: { data1: newData1, data2: newData2 },\n    }));\n  };\n\n  let rows = [];\n\n  const getTraductorLength = useCacheCall('Traductores', 'getTraductorLength') || 0;\n\n\n\n  for (let i = 0; i < getTraductorLength; i++) {\n    rows.push(<DaoTraductorRow key={'ab-' + i} TraductorIndex={i} onDataChange={handleDataChange} />);\n  }\n\n  return (\n    <>\n      {rows}\n      <Daopropose2 traductores={sharedData} longitud={getTraductorLength}></Daopropose2>\n\n    </>\n  );\n};\n\nexport default Daopropose;\n","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/propose/DaoTraductorRow.js",["253","254","255","256"],"import {drizzleReactHooks} from '@drizzle/react-plugin'\nimport React, { useEffect, useState } from 'react';\nimport {Link} from \"react-router-dom\";\nconst {useDrizzle} = drizzleReactHooks;\n\nconst DaoTraductorRow = ({TraductorIndex, onDataChange}) => {\n const {useCacheCall} = useDrizzle();\n let {addr, datos} = useCacheCall(['Traductores'],\n call => {\n const addr = call(\"Traductores\", \"s_traductores\", TraductorIndex);\n const datos = addr && call(\"Traductores\", \"datosHolders\", addr);\n return {addr, datos};\n }\n \n );\n\n\n useEffect(() => {\n  if (datos && addr) {\n    onDataChange(TraductorIndex, datos, addr);\n  }\n}, [TraductorIndex, datos, addr]);\n\n\n\n\n\n};\nexport default DaoTraductorRow;","/home/pablo/Desktop/DAO/dapp/src/components/dao/Daolist/propose/Daopropose2.js",["257","258","259","260","261","262","263"],"import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\n\n\n\nconst Daopropose2 = ({ traductores, longitud }) => {\n  const { useCacheCall } = useDrizzle();\n\n\n\n\n  const { drizzle } = useDrizzle();\n\n  const drizzleState = useDrizzleState(state => state);\n\n\n\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectedData2Option1, setSelectedData2Option1] = useState('');\n  const [selectedData2Option2, setSelectedData2Option2] = useState('');\n  const [textInput1, setTextInput1] = useState('');\n  const [textInput2, setTextInput2] = useState('');\n  const [isFormFilled, setIsFormFilled] = useState(false);\n\n  const handleChangeOption1 = (event) => {\n    const selectedIndex = event.target.selectedIndex;\n    setSelectedOption('option1');\n    setSelectedData2Option1(traductores[selectedIndex - 1]?.data2 || '');\n  };\n\n  const handleChangeOption2 = (event) => {\n    const selectedIndex = event.target.selectedIndex;\n    setSelectedOption('option2');\n    setSelectedData2Option2(traductores[selectedIndex - 1]?.data2 || '');\n  };\n\n  // Check if the form is filled whenever any of the input values change\n  useEffect(() => {\n    const isDropdownFilled = selectedOption !== '';\n    const isTextInput1Filled = textInput1.trim() !== '';\n    const isTextInput2Filled = textInput2.trim() !== '';\n\n    setIsFormFilled(isDropdownFilled && isTextInput1Filled && isTextInput2Filled);\n  }, [selectedOption, textInput1, textInput2]);\n\n\n\n\n// Función que se ejecutará al hacer clic en el botón \"Submit\"\nconst handleSubmit = (ev) => {\n    ev.preventDefault();\n    if (selectedOption === 'option1') {\n      // Lógica para la opción \n      \n      console.log('Formulario enviado para la opción 1');\n     \n        const stackIdencoded = drizzle.contracts.Gestor.methods.modificarUNValor(textInput1, selectedData2Option1, 0).encodeABI();\n        const gestoraddress = drizzle.contracts.Gestor.address;\n   let  description = \"Dar tokens a \" + selectedData2Option2 + \" \" + textInput2;\n\n\n        const proposeTx = drizzle.contracts.GovernorContract.methods.propose.cacheSend(\n          [gestoraddress],\n          [0],\n          [stackIdencoded],\n          description\n          );\n    \n\n      \n    } else if (selectedOption === 'option2') {\n      // Lógica para la opción 2\n      console.log('Formulario enviado para la opción 2');\n\n      const stackIdencoded = drizzle.contracts.Gestor.methods.modificarUNValor(textInput1, selectedData2Option2, 1).encodeABI();\n      const gestoraddress = drizzle.contracts.Gestor.address;\n      let  description = \"Quitar tokens a \" + selectedData2Option2 + \" \" + textInput2;\n\n      const proposeTx = drizzle.contracts.GovernorContract.methods.propose.cacheSend(\n        [gestoraddress],\n        [0],\n        [stackIdencoded],\n        description\n        );\n  \n\n      // Aquí puedes realizar las acciones específicas para la opción 2\n    } else if (selectedOption === 'option3') {\n      // Lógica para la opción 3\n      console.log('Formulario enviado para la opción 3');\n\n\n      const stackIdencoded = drizzle.contracts.Gestor.methods.modificarValor(textInput1, 0).encodeABI();\n      const gestoraddress = drizzle.contracts.Gestor.address;\n        let  description = \"Dar tokens a todos \" + textInput2;\n\n      const proposeTx = drizzle.contracts.GovernorContract.methods.propose.cacheSend(\n        [gestoraddress],\n        [0],\n        [stackIdencoded],\n        description\n        );\n\n    } else if (selectedOption === 'option4') {\n      // Lógica para la opción 4\n      console.log('Formulario enviado para la opción 4');\n      const stackIdencoded = drizzle.contracts.Gestor.methods.modificarValor(textInput1, 1).encodeABI();\n      const gestoraddress = drizzle.contracts.Gestor.address;\n\n    let  description = \"Quitar tokens a todos \" + textInput2;\n\n      const proposeTx = drizzle.contracts.GovernorContract.methods.propose.cacheSend(\n        [gestoraddress],\n        [0],\n        [stackIdencoded],\n        description\n        );\n\n    }\n  };\n\n\n\n  return (\n    <div>\n      <form>\n        <label>\n          Selecciona una opción:\n          <select value={selectedOption} onChange={(event) => setSelectedOption(event.target.value)}>\n            <option value=\"\">Seleccionar</option>\n            <option value=\"option1\">Dar tokens a traductor</option>\n            <option value=\"option2\">Quitar tokens a traductor</option>\n            <option value=\"option3\">Dar tokens a TODOS</option>\n            <option value=\"option4\">Quitar tokens a TODOS</option>\n          </select>\n        </label>\n      </form>\n\n      {selectedOption === 'option1' && (\n  <div>\n    <p></p>\n    <form>\n      <label>\n        Selecciona un traductor:\n        <select value={selectedData2Option1} onChange={handleChangeOption1}>\n          <option value=\"\">Seleccionar</option>\n          {Array.from({ length: longitud }, (_, i) => (\n            <option key={i} value={traductores[i]?.data2}> {/* Aquí se usa traductores[i]?.data2 */}\n              {traductores[i]?.data1} {/* Aquí se muestra el nombre del traductor */}\n            </option>\n          ))}\n        </select>\n      </label>\n    </form>\n  </div>\n)}\n{selectedOption === 'option2' && (\n  <div>\n    <p></p>\n    <form>\n      <label>\n        Selecciona un traductor:\n        <select value={selectedData2Option2} onChange={handleChangeOption2}>\n          <option value=\"\">Seleccionar</option>\n          {Array.from({ length: longitud }, (_, i) => (\n            <option key={i} value={traductores[i]?.data2}> {/* Aquí se usa traductores[i]?.data2 */}\n              {traductores[i]?.data1} {/* Aquí se muestra el nombre del traductor */}\n            </option>\n          ))}\n        </select>\n      </label>\n    </form>\n  </div>\n)}\n\n      <div>\n    \n      <p>Cantidad:</p>\n<input\n  type=\"number\" // Cambiar el tipo de entrada a \"number\"\n  min=\"0\" // Establecer el valor mínimo a 0 para permitir solo números positivos\n  value={textInput1}\n  onChange={(e) => {\n    const inputText = e.target.value;\n    // Validar que solo se ingresen números positivos\n    const sanitizedText = inputText.replace(/[^0-9]/g, ''); // Eliminar todos los caracteres no numéricos\n    setTextInput1(sanitizedText);\n  }}\n/>\n\n        <p>Descripción:</p>\n        <input\n          type=\"text\"\n          value={textInput2}\n          onChange={(e) => setTextInput2(e.target.value)}\n        />\n      </div>\n\n      {selectedOption === 'option1' && <p>cuenta: {selectedData2Option1}</p>}\n      {selectedOption === 'option2' && <p>cuenta: {selectedData2Option2}</p>}\n\n     <button disabled={!isFormFilled} onClick={handleSubmit}>Crear\n      </button>\n    </div>\n  );\n};\n\nexport default Daopropose2;\n","/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyNadie.js",[],"/home/pablo/Desktop/DAO/dapp/src/components/traductor/CreateTraductor.js",["264","265","266","267","268"],"import { useState } from \"react\";\nimport { drizzleReactHooks } from '@drizzle/react-plugin'\n\n\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\n\n\n\nconst CreateTraductor = () => {\n    const { drizzle } = useDrizzle();\n    const drizzleState = useDrizzleState((state) => state);\n \n    const address = drizzleState.accounts[0];\n    const [setLastStackID] = useState(undefined)\n    // Conservar los valores metidos en el formulario\n    \n     \n\n    let [nombre, setNombre] = useState(\"\");\n    \n    let [direccion, setDireccion] = useState(\"\");\n\n\n\n    return (<article className=\"AppMisDatos\">\n\n        <h3>Registrarse</h3>\n        <form>\n            <p> Nombre del traductor: &nbsp;\n                <input key=\"nombre\" type=\"text\" name=\"nombre\" value={nombre} placeholder=\"Nombre\"\n                    onChange={ev => setNombre(ev.target.value)} /> </p>\n\n            <button key=\"submit\" className=\"pure-button\" type=\"button\"\n                onClick={ev => {\n                    ev.preventDefault();\n                    const stackId = drizzle.contracts.Traductores.methods.createTraductor.cacheSend(nombre);\n                  //  setLastStackID(stackId);\n                }}>Registrar</button>\n        </form>\n\n    </article>);\n\n};\nexport default CreateTraductor;","/home/pablo/Desktop/DAO/dapp/src/components/company/tokens/TokenCompanybody.js",["269","270","271","272","273"],"import React, { useState, useEffect } from 'react';\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport { useParams, Link } from 'react-router-dom';\n\n\n\n\n\nimport TokenCompanyRow from './TokenCompanyRow';\nimport TokenCompanyswitch from './TokenCompanyswitch';\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst TokenCompanybody = ({ children }) => {\n  const { useCacheCall, useCacheSend } = useDrizzle();\n  const drizzleState = useDrizzleState((state) => state);\n\n  const addr = drizzleState.accounts[0];\n  const balance = drizzleState.accountBalances[addr];\n\n  const [sharedData, setSharedData] = useState({});\n\n  const handleDataChange = (traductorIndex, newData1, newData2) => {\n    setSharedData((prevData) => ({\n      ...prevData,\n      [traductorIndex]: { data1: newData1, data2: newData2 },\n    }));\n  };\n\n  let rows = [];\n\n  const getCompanyLength = useCacheCall(\"Traductores\", \"getCompanyLength\") || 0;\n  for (let i = 0; i < getCompanyLength; i++) {\n    rows.push(<TokenCompanyRow key={'ab-' + i} TraductorIndex={i} onDataChange={handleDataChange} />);\n  }\n\n  return (\n    <>\n      {rows}\n      <TokenCompanyswitch traductores={sharedData} longitud={getCompanyLength}></TokenCompanyswitch>\n\n    </>\n  );\n};\n\nexport default TokenCompanybody;\n","/home/pablo/Desktop/DAO/dapp/src/components/company/tokens/TokenCompanyRow.js",["274","275","276","277"],"import {drizzleReactHooks} from '@drizzle/react-plugin'\nimport React, { useEffect, useState } from 'react';\nimport {Link} from \"react-router-dom\";\nconst {useDrizzle} = drizzleReactHooks;\n\nconst TokenCompanyRow = ({TraductorIndex, onDataChange}) => {\n const {useCacheCall} = useDrizzle();\n let {addr, datos} = useCacheCall(['Traductores'],\n call => {\n const addr = call(\"Traductores\", \"companies\", TraductorIndex);\n const datos = addr && call(\"Traductores\", \"datosCompanies\", addr);\n return {addr, datos};\n }\n \n );\n\n\n\n\n useEffect(() => {\n  if (datos && addr) {\n    onDataChange(TraductorIndex, datos, addr);\n  }\n}, [TraductorIndex, datos, addr]);\n\n\n\n\n\n};\nexport default TokenCompanyRow;","/home/pablo/Desktop/DAO/dapp/src/components/company/tokens/TokenCompanyswitch.js",["278","279","280"],"import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst TokenCompanyswitch = ({ traductores, longitud }) => {\n  const { useCacheCall } = useDrizzle();\n  const { drizzle } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectedData2Option1, setSelectedData2Option1] = useState('');\n  const [inputNumber, setInputNumber] = useState('');\n\n  const [isFormFilled, setIsFormFilled] = useState(false);\n  const address = drizzleState.accounts[0];\n\n  const handleChangeOption1 = (event) => {\n    const selectedIndex = event.target.selectedIndex;\n    setSelectedOption('option1');\n    setSelectedData2Option1(traductores[selectedIndex - 1]?.data2 || '');\n  };\n\n  // Check if the form is filled whenever any of the input values change\n  useEffect(() => {\n    const isInputNumberValid = Number(inputNumber) > 0; // Validar que el número ingresado sea positivo\n\n    // Utilizar operador ternario para asignar isDropdownFilled en función de la comparación\n    const isDropdownFilled = address === selectedData2Option1 ? selectedOption !== '' : false;\n\n    setIsFormFilled(isDropdownFilled && isInputNumberValid);\n  }, [selectedOption, inputNumber, address, selectedData2Option1]);\n\n  // Función que se ejecutará al hacer clic en el botón \"Submit\"\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    console.log('Formulario enviado para la opción 1');\n    console.log('Número ingresado:', inputNumber); // Mostrar el valor del número ingresado\n\n    //TransferCompany\n    const stackId = drizzle.contracts.Traductores.methods.TransferCompany.cacheSend(inputNumber, selectedData2Option1);\n  };\n\n  const handleInputChange = (event) => {\n    // Validar que el valor ingresado sea un número positivo\n    const value = event.target.value;\n    if (Number(value) >= 0 || value === '') {\n      setInputNumber(value);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <p></p>\n        <form>\n          <label>\n            Selecciona empresa\n            <select value={selectedData2Option1} onChange={handleChangeOption1}>\n              <option value=\"\">Seleccionar</option>\n              {Array.from({ length: longitud }, (_, i) => (\n                <option key={i} value={traductores[i]?.data2}>\n                  {traductores[i]?.data1} {/* Aquí se muestra el nombre del traductor */}\n                </option>\n              ))}\n            </select>\n          </label>\n          <br />\n          <label>\n          Cantidad de tokens:\n            <input type=\"number\" value={inputNumber} onChange={handleInputChange} />\n          </label>\n          <br />\n          <button onClick={handleSubmit} disabled={!isFormFilled}>\n            Dar\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TokenCompanyswitch;\n","/home/pablo/Desktop/DAO/dapp/src/components/company/Companydelete/ADMINCompanybody.js",["281","282","283","284","285"],"import React, { useState, useEffect } from 'react';\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport { useParams, Link } from 'react-router-dom';\n\n\n\n\n\nimport ADMINCompanyRow from './ADMINCompanyRow';\nimport ADMINCompanydelete from './ADMINCompanydelete';\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst ADMINCompanybody = ({ children }) => {\n  const { useCacheCall, useCacheSend } = useDrizzle();\n  const drizzleState = useDrizzleState((state) => state);\n\n  const addr = drizzleState.accounts[0];\n  const balance = drizzleState.accountBalances[addr];\n\n  const [sharedData, setSharedData] = useState({});\n\n  const handleDataChange = (traductorIndex, newData1, newData2, newData3) => {\n    setSharedData((prevData) => ({\n      ...prevData,\n      [traductorIndex]: { data1: newData1, data2: newData2, data3: newData3  },\n    }));\n  };\n\n  let rows = [];\n\n  const getCompanyLength = useCacheCall(\"Traductores\", \"getCompanyLength\") || 0;\n  for (let i = 0; i < getCompanyLength; i++) {\n    rows.push(<ADMINCompanyRow key={'ab-' + i} TraductorIndex={i} onDataChange={handleDataChange} />);\n  }\n\n  return (\n    <>\n    <h3>Eliminar Compañía</h3>\n      {rows}\n      <ADMINCompanydelete traductores={sharedData} longitud={getCompanyLength}></ADMINCompanydelete>\n\n    </>\n  );\n};\n\nexport default ADMINCompanybody;\n","/home/pablo/Desktop/DAO/dapp/src/components/company/Companydelete/ADMINCompanyRow.js",["286","287","288","289"],"import {drizzleReactHooks} from '@drizzle/react-plugin'\nimport React, { useEffect, useState } from 'react';\nimport {Link} from \"react-router-dom\";\nconst {useDrizzle} = drizzleReactHooks;\n\nconst ADMINCompanyRow = ({TraductorIndex, onDataChange}) => {\n const {useCacheCall} = useDrizzle();\n let {addr, datos} = useCacheCall(['Traductores'],\n call => {\n const addr = call(\"Traductores\", \"companies\", TraductorIndex);\n const datos = addr && call(\"Traductores\", \"datosCompanies\", addr);\n  return {addr, datos};\n }\n \n );\n\n let tokens = useCacheCall(\"GovernanceToken\", \"balanceOf\", addr) || 0;\n\n\n useEffect(() => {\n  if (datos && addr) {\n    onDataChange(TraductorIndex, datos, addr, tokens);\n  }\n}, [TraductorIndex, datos, addr, tokens]);\n\n\n\n\n\n};\nexport default ADMINCompanyRow;","/home/pablo/Desktop/DAO/dapp/src/components/company/Companydelete/ADMINCompanydelete.js",["290","291","292","293","294","295","296","297","298"],"import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst TokenCompanyswitch = ({ traductores, longitud }) => {\n  const { useCacheCall } = useDrizzle();\n  const { drizzle } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectedData2Option1, setSelectedData2Option1] = useState('');\n\n  const [selectedData3Option1, setSelectedData3Option1] = useState('');\n\n  const [inputNumber, setInputNumber] = useState('');\n    // Utilizar el estado selectedOption para determinar si el botón debe estar activo\n  \n\n\n\n\n  const address = drizzleState.accounts[0];\n\n  const handleChangeOption1 = (event) => {\n    const selectedIndex = event.target.selectedIndex;\n    setSelectedOption('option1');\n    setSelectedData2Option1(traductores[selectedIndex - 1]?.data2 || '');\n    setSelectedData3Option1(traductores[selectedIndex - 1]?.data3 || '');\n  };\n\n\n\n  // Función que se ejecutará al hacer clic en el botón \"Submit\"\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    console.log('Formulario enviado para la opción 1');\n\n    console.log(\"Tokens:\",selectedData3Option1);\n\n    //Hacernos con los NFT\n    const stackId2 = drizzle.contracts.NFTContract.methods.NFTCompanydelete.cacheSend(selectedData2Option1);\n    //Eliminar Compañia\n\n    const stackId = drizzle.contracts.Traductores.methods.BurnCompany.cacheSend(selectedData3Option1, selectedData2Option1);\n\n\n    \n  };\n\n\n  return (\n    <div>\n      <div>\n        <p></p>\n        <form>\n          <label>\n            Selecciona empresa\n            <select value={selectedData2Option1} onChange={handleChangeOption1}>\n              <option value=\"\">Seleccionar</option>\n              {Array.from({ length: longitud }, (_, i) => (\n                <option key={i} value={traductores[i]?.data2}>\n                  {traductores[i]?.data1} {/* Aquí se muestra el nombre del traductor */}\n                </option>\n              ))}\n            </select>\n          </label>\n          <button onClick={handleSubmit} >\n            Eliminar\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TokenCompanyswitch;\n","/home/pablo/Desktop/DAO/dapp/src/components/roles/SoyAlguien.js",[],{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":19,"column":8,"nodeType":"305","messageId":"306","endLine":19,"endColumn":16},{"ruleId":"303","severity":1,"message":"307","line":20,"column":8,"nodeType":"305","messageId":"306","endLine":20,"endColumn":20},{"ruleId":"303","severity":1,"message":"308","line":21,"column":8,"nodeType":"305","messageId":"306","endLine":21,"endColumn":18},{"ruleId":"303","severity":1,"message":"309","line":3,"column":8,"nodeType":"305","messageId":"306","endLine":3,"endColumn":14},{"ruleId":"303","severity":1,"message":"310","line":20,"column":11,"nodeType":"305","messageId":"306","endLine":20,"endColumn":16},{"ruleId":"303","severity":1,"message":"311","line":23,"column":11,"nodeType":"305","messageId":"306","endLine":23,"endColumn":17},{"ruleId":"303","severity":1,"message":"312","line":10,"column":12,"nodeType":"305","messageId":"306","endLine":10,"endColumn":26},{"ruleId":"303","severity":1,"message":"313","line":33,"column":27,"nodeType":"305","messageId":"306","endLine":33,"endColumn":34},{"ruleId":"303","severity":1,"message":"314","line":19,"column":11,"nodeType":"305","messageId":"306","endLine":19,"endColumn":23},{"ruleId":"303","severity":1,"message":"312","line":21,"column":10,"nodeType":"305","messageId":"306","endLine":21,"endColumn":24},{"ruleId":"315","severity":1,"message":"316","line":69,"column":4,"nodeType":"317","endLine":69,"endColumn":21,"suggestions":"318"},{"ruleId":"303","severity":1,"message":"319","line":113,"column":9,"nodeType":"305","messageId":"306","endLine":113,"endColumn":24},{"ruleId":"303","severity":1,"message":"313","line":156,"column":13,"nodeType":"305","messageId":"306","endLine":156,"endColumn":20},{"ruleId":"303","severity":1,"message":"320","line":8,"column":9,"nodeType":"305","messageId":"306","endLine":8,"endColumn":21},{"ruleId":"303","severity":1,"message":"313","line":131,"column":19,"nodeType":"305","messageId":"306","endLine":131,"endColumn":26},{"ruleId":"303","severity":1,"message":"321","line":3,"column":21,"nodeType":"305","messageId":"306","endLine":3,"endColumn":25},{"ruleId":"303","severity":1,"message":"322","line":13,"column":11,"nodeType":"305","messageId":"306","endLine":13,"endColumn":16},{"ruleId":"303","severity":1,"message":"323","line":14,"column":11,"nodeType":"305","messageId":"306","endLine":14,"endColumn":17},{"ruleId":"303","severity":1,"message":"324","line":16,"column":11,"nodeType":"305","messageId":"306","endLine":16,"endColumn":18},{"ruleId":"303","severity":1,"message":"313","line":44,"column":47,"nodeType":"305","messageId":"306","endLine":44,"endColumn":54},{"ruleId":"303","severity":1,"message":"325","line":16,"column":11,"nodeType":"305","messageId":"306","endLine":16,"endColumn":18},{"ruleId":"303","severity":1,"message":"325","line":12,"column":9,"nodeType":"305","messageId":"306","endLine":12,"endColumn":16},{"ruleId":"303","severity":1,"message":"326","line":32,"column":9,"nodeType":"305","messageId":"306","endLine":32,"endColumn":13},{"ruleId":"327","severity":1,"message":"328","line":46,"column":19,"nodeType":"329","messageId":"330","endLine":46,"endColumn":21},{"ruleId":"327","severity":1,"message":"328","line":46,"column":37,"nodeType":"329","messageId":"330","endLine":46,"endColumn":39},{"ruleId":"327","severity":1,"message":"328","line":51,"column":24,"nodeType":"329","messageId":"330","endLine":51,"endColumn":26},{"ruleId":"327","severity":1,"message":"328","line":55,"column":24,"nodeType":"329","messageId":"330","endLine":55,"endColumn":26},{"ruleId":"303","severity":1,"message":"331","line":8,"column":25,"nodeType":"305","messageId":"306","endLine":8,"endColumn":37},{"ruleId":"303","severity":1,"message":"320","line":9,"column":9,"nodeType":"305","messageId":"306","endLine":9,"endColumn":21},{"ruleId":"303","severity":1,"message":"326","line":23,"column":9,"nodeType":"305","messageId":"306","endLine":23,"endColumn":13},{"ruleId":"303","severity":1,"message":"332","line":42,"column":13,"nodeType":"305","messageId":"306","endLine":42,"endColumn":22},{"ruleId":"303","severity":1,"message":"333","line":1,"column":27,"nodeType":"305","messageId":"306","endLine":1,"endColumn":36},{"ruleId":"303","severity":1,"message":"334","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":19},{"ruleId":"303","severity":1,"message":"321","line":3,"column":21,"nodeType":"305","messageId":"306","endLine":3,"endColumn":25},{"ruleId":"303","severity":1,"message":"331","line":11,"column":25,"nodeType":"305","messageId":"306","endLine":11,"endColumn":37},{"ruleId":"303","severity":1,"message":"325","line":15,"column":9,"nodeType":"305","messageId":"306","endLine":15,"endColumn":16},{"ruleId":"303","severity":1,"message":"335","line":2,"column":8,"nodeType":"305","messageId":"306","endLine":2,"endColumn":13},{"ruleId":"303","severity":1,"message":"336","line":2,"column":28,"nodeType":"305","messageId":"306","endLine":2,"endColumn":36},{"ruleId":"303","severity":1,"message":"321","line":3,"column":9,"nodeType":"305","messageId":"306","endLine":3,"endColumn":13},{"ruleId":"315","severity":1,"message":"337","line":22,"column":4,"nodeType":"317","endLine":22,"endColumn":33,"suggestions":"338"},{"ruleId":"303","severity":1,"message":"321","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":14},{"ruleId":"303","severity":1,"message":"314","line":14,"column":11,"nodeType":"305","messageId":"306","endLine":14,"endColumn":23},{"ruleId":"303","severity":1,"message":"320","line":21,"column":9,"nodeType":"305","messageId":"306","endLine":21,"endColumn":21},{"ruleId":"303","severity":1,"message":"332","line":69,"column":15,"nodeType":"305","messageId":"306","endLine":69,"endColumn":24},{"ruleId":"303","severity":1,"message":"332","line":86,"column":13,"nodeType":"305","messageId":"306","endLine":86,"endColumn":22},{"ruleId":"303","severity":1,"message":"332","line":104,"column":13,"nodeType":"305","messageId":"306","endLine":104,"endColumn":22},{"ruleId":"303","severity":1,"message":"332","line":119,"column":13,"nodeType":"305","messageId":"306","endLine":119,"endColumn":22},{"ruleId":"303","severity":1,"message":"324","line":15,"column":11,"nodeType":"305","messageId":"306","endLine":15,"endColumn":18},{"ruleId":"303","severity":1,"message":"312","line":16,"column":12,"nodeType":"305","messageId":"306","endLine":16,"endColumn":26},{"ruleId":"303","severity":1,"message":"339","line":23,"column":10,"nodeType":"305","messageId":"306","endLine":23,"endColumn":19},{"ruleId":"303","severity":1,"message":"340","line":23,"column":21,"nodeType":"305","messageId":"306","endLine":23,"endColumn":33},{"ruleId":"303","severity":1,"message":"313","line":38,"column":27,"nodeType":"305","messageId":"306","endLine":38,"endColumn":34},{"ruleId":"303","severity":1,"message":"333","line":1,"column":27,"nodeType":"305","messageId":"306","endLine":1,"endColumn":36},{"ruleId":"303","severity":1,"message":"334","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":19},{"ruleId":"303","severity":1,"message":"321","line":3,"column":21,"nodeType":"305","messageId":"306","endLine":3,"endColumn":25},{"ruleId":"303","severity":1,"message":"331","line":14,"column":25,"nodeType":"305","messageId":"306","endLine":14,"endColumn":37},{"ruleId":"303","severity":1,"message":"325","line":18,"column":9,"nodeType":"305","messageId":"306","endLine":18,"endColumn":16},{"ruleId":"303","severity":1,"message":"335","line":2,"column":8,"nodeType":"305","messageId":"306","endLine":2,"endColumn":13},{"ruleId":"303","severity":1,"message":"336","line":2,"column":28,"nodeType":"305","messageId":"306","endLine":2,"endColumn":36},{"ruleId":"303","severity":1,"message":"321","line":3,"column":9,"nodeType":"305","messageId":"306","endLine":3,"endColumn":13},{"ruleId":"315","severity":1,"message":"337","line":24,"column":4,"nodeType":"317","endLine":24,"endColumn":33,"suggestions":"341"},{"ruleId":"303","severity":1,"message":"321","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":14},{"ruleId":"303","severity":1,"message":"314","line":8,"column":11,"nodeType":"305","messageId":"306","endLine":8,"endColumn":23},{"ruleId":"303","severity":1,"message":"313","line":42,"column":11,"nodeType":"305","messageId":"306","endLine":42,"endColumn":18},{"ruleId":"303","severity":1,"message":"333","line":1,"column":27,"nodeType":"305","messageId":"306","endLine":1,"endColumn":36},{"ruleId":"303","severity":1,"message":"334","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":19},{"ruleId":"303","severity":1,"message":"321","line":3,"column":21,"nodeType":"305","messageId":"306","endLine":3,"endColumn":25},{"ruleId":"303","severity":1,"message":"331","line":14,"column":25,"nodeType":"305","messageId":"306","endLine":14,"endColumn":37},{"ruleId":"303","severity":1,"message":"325","line":18,"column":9,"nodeType":"305","messageId":"306","endLine":18,"endColumn":16},{"ruleId":"303","severity":1,"message":"335","line":2,"column":8,"nodeType":"305","messageId":"306","endLine":2,"endColumn":13},{"ruleId":"303","severity":1,"message":"336","line":2,"column":28,"nodeType":"305","messageId":"306","endLine":2,"endColumn":36},{"ruleId":"303","severity":1,"message":"321","line":3,"column":9,"nodeType":"305","messageId":"306","endLine":3,"endColumn":13},{"ruleId":"315","severity":1,"message":"337","line":24,"column":4,"nodeType":"317","endLine":24,"endColumn":41,"suggestions":"342"},{"ruleId":"303","severity":1,"message":"333","line":2,"column":27,"nodeType":"305","messageId":"306","endLine":2,"endColumn":36},{"ruleId":"303","severity":1,"message":"321","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":14},{"ruleId":"303","severity":1,"message":"314","line":8,"column":11,"nodeType":"305","messageId":"306","endLine":8,"endColumn":23},{"ruleId":"303","severity":1,"message":"343","line":12,"column":10,"nodeType":"305","messageId":"306","endLine":12,"endColumn":24},{"ruleId":"303","severity":1,"message":"344","line":17,"column":10,"nodeType":"305","messageId":"306","endLine":17,"endColumn":21},{"ruleId":"303","severity":1,"message":"345","line":17,"column":23,"nodeType":"305","messageId":"306","endLine":17,"endColumn":37},{"ruleId":"303","severity":1,"message":"324","line":24,"column":9,"nodeType":"305","messageId":"306","endLine":24,"endColumn":16},{"ruleId":"303","severity":1,"message":"346","line":43,"column":11,"nodeType":"305","messageId":"306","endLine":43,"endColumn":19},{"ruleId":"303","severity":1,"message":"313","line":46,"column":11,"nodeType":"305","messageId":"306","endLine":46,"endColumn":18},"no-native-reassign",["347"],"no-negated-in-lhs",["348"],"no-unused-vars","'SoyAdmin' is defined but never used.","Identifier","unusedVar","'SoyTraductor' is defined but never used.","'SoyCompany' is defined but never used.","'Header' is defined but never used.","'admin' is assigned a value but never used.","'gestor' is assigned a value but never used.","'setLastStackID' is assigned a value but never used.","'stackId' is assigned a value but never used.","'useCacheCall' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addressToSubmit', 'createNFT', 'descriptionToSubmit', 'fileType', 'hash', 'nameToSubmit', and 'priceToSubmit'. Either include them or remove the dependency array.","ArrayExpression",["349"],"'getFileFromIPFS' is assigned a value but never used.","'drizzleState' is assigned a value but never used.","'Link' is defined but never used.","'datos' is assigned a value but never used.","'tokens' is assigned a value but never used.","'address' is assigned a value but never used.","'balance' is assigned a value but never used.","'addr' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useCacheSend' is assigned a value but never used.","'proposeTx' is assigned a value but never used.","'useEffect' is defined but never used.","'useParams' is defined but never used.","'React' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'onDataChange'. Either include it or remove the dependency array. If 'onDataChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["350"],"'direccion' is assigned a value but never used.","'setDireccion' is assigned a value but never used.",["351"],["352"],"'selectedOption' is assigned a value but never used.","'inputNumber' is assigned a value but never used.","'setInputNumber' is assigned a value but never used.","'stackId2' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"355","fix":"357"},{"desc":"358","fix":"359"},"Update the dependencies array to be: [addressToSubmit, createNFT, descriptionToSubmit, fileType, hash, isHashAvailable, nameToSubmit, priceToSubmit]",{"range":"360","text":"361"},"Update the dependencies array to be: [TraductorIndex, datos, addr, onDataChange]",{"range":"362","text":"363"},{"range":"364","text":"363"},"Update the dependencies array to be: [TraductorIndex, datos, addr, tokens, onDataChange]",{"range":"365","text":"366"},[2377,2394],"[addressToSubmit, createNFT, descriptionToSubmit, fileType, hash, isHashAvailable, nameToSubmit, priceToSubmit]",[614,643],"[TraductorIndex, datos, addr, onDataChange]",[614,643],[693,730],"[TraductorIndex, datos, addr, tokens, onDataChange]"]