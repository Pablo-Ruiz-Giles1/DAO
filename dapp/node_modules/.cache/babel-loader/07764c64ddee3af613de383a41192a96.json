{"ast":null,"code":"var _jsxFileName = \"/home/pablo/Desktop/DAO/dapp/src/components/ipfs/watchipfs.js\",\n  _s = $RefreshSig$();\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport Oneipfs from './oneipfs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useDrizzle,\n  useDrizzleState\n} = drizzleReactHooks;\nconst Watchipfs = ({\n  children,\n  address\n}) => {\n  _s();\n  // Agregamos \"address\" como prop\n  const {\n    useCacheCall\n  } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n\n  // Utilizamos el prop \"address\" que se pasa como parámetro\n  const nftsidResponse = useCacheCall(\"NFTContract\", \"getNFTsByOwner\", address) || [];\n  console.log(\"Valor de nftsidResponse\", nftsidResponse);\n\n  // Utiliza el método map para separar cada valor y llamar al componente Oneipfs\n  const renderedRows = nftsidResponse.map((nftsidValue, index) => /*#__PURE__*/_jsxDEV(Oneipfs, {\n    nftsid: nftsidValue,\n    address: address\n  }, \"ab-\" + index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"NFT holdeados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), renderedRows]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Watchipfs, \"zgmvQG3Ngt0r//3nz0B5qx+2zn4=\", true, function () {\n  return [useDrizzle, useDrizzleState];\n});\n_c = Watchipfs;\nexport default Watchipfs;\nvar _c;\n$RefreshReg$(_c, \"Watchipfs\");","map":{"version":3,"names":["drizzleReactHooks","Oneipfs","jsxDEV","_jsxDEV","useDrizzle","useDrizzleState","Watchipfs","children","address","_s","useCacheCall","drizzleState","state","nftsidResponse","console","log","renderedRows","map","nftsidValue","index","nftsid","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/pablo/Desktop/DAO/dapp/src/components/ipfs/watchipfs.js"],"sourcesContent":["import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport Oneipfs from './oneipfs';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst Watchipfs = ({ children, address }) => { // Agregamos \"address\" como prop\n  const { useCacheCall } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n\n  // Utilizamos el prop \"address\" que se pasa como parámetro\n  const nftsidResponse = useCacheCall(\"NFTContract\", \"getNFTsByOwner\", address) || [];\n\n  console.log(\"Valor de nftsidResponse\", nftsidResponse);\n  \n  // Utiliza el método map para separar cada valor y llamar al componente Oneipfs\n  const renderedRows = nftsidResponse.map((nftsidValue, index) => (\n    <Oneipfs key={\"ab-\" + index} nftsid={nftsidValue} address={address}/>\n  ));\n\n  return (\n    <tbody>\n      <h3>NFT holdeados</h3>\n      {renderedRows}\n    </tbody>\n  );\n};\n\nexport default Watchipfs;\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,uBAAuB;AACzD,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAM;EAAEC,UAAU;EAAEC;AAAgB,CAAC,GAAGL,iBAAiB;AAEzD,MAAMM,SAAS,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAAE;EAC7C,MAAM;IAAEC;EAAa,CAAC,GAAGN,UAAU,CAAC,CAAC;EACrC,MAAMO,YAAY,GAAGN,eAAe,CAACO,KAAK,IAAIA,KAAK,CAAC;;EAEpD;EACA,MAAMC,cAAc,GAAGH,YAAY,CAAC,aAAa,EAAE,gBAAgB,EAAEF,OAAO,CAAC,IAAI,EAAE;EAEnFM,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,cAAc,CAAC;;EAEtD;EACA,MAAMG,YAAY,GAAGH,cAAc,CAACI,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBACzDhB,OAAA,CAACF,OAAO;IAAqBmB,MAAM,EAAEF,WAAY;IAACV,OAAO,EAAEA;EAAQ,GAArD,KAAK,GAAGW,KAAK;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAyC,CACrE,CAAC;EAEF,oBACErB,OAAA;IAAAI,QAAA,gBACEJ,OAAA;MAAAI,QAAA,EAAI;IAAa;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBR,YAAY;EAAA;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEZ,CAAC;AAACf,EAAA,CApBIH,SAAS;EAAA,QACYF,UAAU,EACdC,eAAe;AAAA;AAAAoB,EAAA,GAFhCnB,SAAS;AAsBf,eAAeA,SAAS;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}