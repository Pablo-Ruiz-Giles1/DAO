{"ast":null,"code":"var _jsxFileName = \"/home/pablo/Desktop/DAO/dapp/src/components/ipfs/oneipfs.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  useDrizzle,\n  useDrizzleState\n} = drizzleReactHooks;\nconst IPFS_BASE_URL = \"https://ipfs.io/ipfs/\";\nconst Oneipfs = ({\n  nftsid,\n  address\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const {\n    useCacheCall\n  } = useDrizzle();\n  const {\n    drizzle\n  } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const addr = drizzleState.accounts[0];\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState(null);\n  const fetchData = async () => {\n    _s();\n    try {\n      const newData = await useCacheCall(\"NFTContract\", \"_nftMetadata\", nftsid);\n      if (newData && newData.cid) {\n        setData(newData);\n        setIsLoading(false);\n      } else {\n        setIsLoading(true);\n      }\n    } catch (error) {\n      if (error.message.includes(\"504\")) {\n        // Si se produce un error 5004 Gateway Timeout, volver a pedir los datos.\n        fetchData();\n      } else {\n        setIsLoading(true);\n      }\n    }\n  };\n  _s(fetchData, \"z/G/cQg1FB0V0MhOHt7+f9dwEEc=\", false, function () {\n    return [useCacheCall];\n  });\n  useEffect(() => {\n    const interval = setInterval(fetchData, 10000); // Comprobar cada 10 segundos.\n    fetchData(); // Realizar la primera comprobación al cargar el componente.\n\n    return () => {\n      clearInterval(interval); // Limpiar el intervalo al desmontar el componente.\n    };\n  }, [nftsid]);\n  useEffect(() => {\n    fetchData(); // Actualizar los datos cuando cambie nftsid.\n  }, [nftsid]);\n  const renderContent = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Resto del código de renderización\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [renderContent(), addr !== address && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"pure-button\",\n      type: \"button\",\n      onClick: ev => {\n        ev.preventDefault();\n        const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(Number(nftsid), addr);\n      },\n      children: \"Comprar\"\n    }, \"submit\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s2(Oneipfs, \"KBs5gYQHee35voFPY7d9+s0ET1c=\", false, function () {\n  return [useDrizzle, useDrizzle, useDrizzleState];\n});\n_c = Oneipfs;\nexport default Oneipfs;\nvar _c;\n$RefreshReg$(_c, \"Oneipfs\");","map":{"version":3,"names":["React","useEffect","useState","drizzleReactHooks","jsxDEV","_jsxDEV","Fragment","_Fragment","useDrizzle","useDrizzleState","IPFS_BASE_URL","Oneipfs","nftsid","address","_s2","_s","$RefreshSig$","useCacheCall","drizzle","drizzleState","state","addr","accounts","isLoading","setIsLoading","data","setData","fetchData","newData","cid","error","message","includes","interval","setInterval","clearInterval","renderContent","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onClick","ev","preventDefault","stackId","contracts","NFTContract","methods","exchangeNFTOther","cacheSend","Number","_c","$RefreshReg$"],"sources":["/home/pablo/Desktop/DAO/dapp/src/components/ipfs/oneipfs.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst IPFS_BASE_URL = \"https://ipfs.io/ipfs/\";\n\nconst Oneipfs = ({ nftsid, address }) => {\n  const { useCacheCall } = useDrizzle();\n  const { drizzle } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const addr = drizzleState.accounts[0];\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const newData = await useCacheCall(\"NFTContract\", \"_nftMetadata\", nftsid);\n      if (newData && newData.cid) {\n        setData(newData);\n        setIsLoading(false);\n      } else {\n        setIsLoading(true);\n      }\n    } catch (error) {\n      if (error.message.includes(\"504\")) {\n        // Si se produce un error 5004 Gateway Timeout, volver a pedir los datos.\n        fetchData();\n      } else {\n        setIsLoading(true);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const interval = setInterval(fetchData, 10000); // Comprobar cada 10 segundos.\n    fetchData(); // Realizar la primera comprobación al cargar el componente.\n\n    return () => {\n      clearInterval(interval); // Limpiar el intervalo al desmontar el componente.\n    };\n  }, [nftsid]);\n\n  useEffect(() => {\n    fetchData(); // Actualizar los datos cuando cambie nftsid.\n  }, [nftsid]);\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    // Resto del código de renderización\n\n  };\n\n  return (\n    <>\n      {renderContent()}\n      {addr !== address && (\n        <button\n          key=\"submit\"\n          className=\"pure-button\"\n          type=\"button\"\n          onClick={ev => {\n            ev.preventDefault();\n\n            const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(Number(nftsid), addr);\n          }}\n        >\n          Comprar\n        </button>\n      )}\n    </>\n  );\n};\n\nexport default Oneipfs;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,iBAAiB,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1D,MAAM;EAAEC,UAAU;EAAEC;AAAgB,CAAC,GAAGN,iBAAiB;AAEzD,MAAMO,aAAa,GAAG,uBAAuB;AAE7C,MAAMC,OAAO,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAQ,CAAC,KAAK;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACvC,MAAM;IAAEC;EAAa,CAAC,GAAGT,UAAU,CAAC,CAAC;EACrC,MAAM;IAAEU;EAAQ,CAAC,GAAGV,UAAU,CAAC,CAAC;EAChC,MAAMW,YAAY,GAAGV,eAAe,CAACW,KAAK,IAAIA,KAAK,CAAC;EACpD,MAAMC,IAAI,GAAGF,YAAY,CAACG,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACuB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMyB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAAAZ,EAAA;IAC5B,IAAI;MACF,MAAMa,OAAO,GAAG,MAAMX,YAAY,CAAC,aAAa,EAAE,cAAc,EAAEL,MAAM,CAAC;MACzE,IAAIgB,OAAO,IAAIA,OAAO,CAACC,GAAG,EAAE;QAC1BH,OAAO,CAACE,OAAO,CAAC;QAChBJ,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,MAAM;QACLA,YAAY,CAAC,IAAI,CAAC;MACpB;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjC;QACAL,SAAS,CAAC,CAAC;MACb,CAAC,MAAM;QACLH,YAAY,CAAC,IAAI,CAAC;MACpB;IACF;EACF,CAAC;EAACT,EAAA,CAjBIY,SAAS;IAAA,QAEWV,YAAY;EAAA;EAiBtChB,SAAS,CAAC,MAAM;IACd,MAAMgC,QAAQ,GAAGC,WAAW,CAACP,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;IAChDA,SAAS,CAAC,CAAC,CAAC,CAAC;;IAEb,OAAO,MAAM;MACXQ,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAACrB,MAAM,CAAC,CAAC;EAEZX,SAAS,CAAC,MAAM;IACd0B,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,CAACf,MAAM,CAAC,CAAC;EAEZ,MAAMwB,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIb,SAAS,EAAE;MACb,oBAAOlB,OAAA;QAAAgC,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAC1B;;IAEA;EAEF,CAAC;;EAED,oBACEpC,OAAA,CAAAE,SAAA;IAAA8B,QAAA,GACGD,aAAa,CAAC,CAAC,EACff,IAAI,KAAKR,OAAO,iBACfR,OAAA;MAEEqC,SAAS,EAAC,aAAa;MACvBC,IAAI,EAAC,QAAQ;MACbC,OAAO,EAAEC,EAAE,IAAI;QACbA,EAAE,CAACC,cAAc,CAAC,CAAC;QAEnB,MAAMC,OAAO,GAAG7B,OAAO,CAAC8B,SAAS,CAACC,WAAW,CAACC,OAAO,CAACC,gBAAgB,CAACC,SAAS,CAACC,MAAM,CAACzC,MAAM,CAAC,EAAES,IAAI,CAAC;MACxG,CAAE;MAAAgB,QAAA,EACH;IAED,GAVM,QAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUN,CACT;EAAA,eACD,CAAC;AAEP,CAAC;AAAC3B,GAAA,CApEIH,OAAO;EAAA,QACcH,UAAU,EACfA,UAAU,EACTC,eAAe;AAAA;AAAA6C,EAAA,GAHhC3C,OAAO;AAsEb,eAAeA,OAAO;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}