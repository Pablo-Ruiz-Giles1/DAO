{"ast":null,"code":"var _jsxFileName = \"/home/pablo/Desktop/DAO/dapp/src/components/ipfs/oneipfs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { drizzleReactHooks } from \"@drizzle/react-plugin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  useDrizzle,\n  useDrizzleState\n} = drizzleReactHooks;\nconst IPFS_BASE_URL = \"https://ipfs.io/ipfs/\";\nconst Oneipfs = ({\n  nftsid,\n  address\n}) => {\n  _s();\n  const {\n    useCacheSend\n  } = useDrizzle(); // Solo necesitamos useCacheSend para enviar la solicitud nuevamente\n  const {\n    drizzle\n  } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const addr = drizzleState.accounts[0];\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState(null); // Almacenamos los datos en estado\n  const [showReloadButton, setShowReloadButton] = useState(false); // Estado para mostrar el botón de recarga\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const result = await drizzle.contracts.NFTContract.methods._nftMetadata(nftsid).call();\n        setData(result);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error al cargar datos:\", error);\n        setShowReloadButton(true); // Mostrar el botón de recarga en caso de error\n      }\n    };\n\n    loadData(); // Cargar los datos una vez al inicio del componente\n  }, [nftsid]);\n  console.log(\"ID NFT\", nftsid);\n  console.log(\"Address:\", address);\n  const refreshContent = async () => {\n    setIsLoading(true); // Establecer isLoading en true para mostrar \"Loading...\"\n    setShowReloadButton(false); // Ocultar el botón de recarga\n    try {\n      const result = await drizzle.contracts.NFTContract.methods._nftMetadata(nftsid).call();\n      setData(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error al cargar datos:\", error);\n      setShowReloadButton(true); // Mostrar el botón de recarga en caso de error\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }, this);\n    }\n    switch (data.format) {\n      case \"0\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: IPFS_BASE_URL + data.cid,\n            alt: \"Imagen IPFS\",\n            style: {\n              width: \"200px\",\n              height: \"200px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      case \"1\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            controls: true,\n            src: IPFS_BASE_URL + data.cid,\n            style: {\n              width: \"200px\",\n              height: \"200px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      case \"2\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            src: IPFS_BASE_URL + data.cid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Formato desconocido\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showReloadButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"pure-button\",\n      type: \"button\",\n      onClick: refreshContent // Llamar a la función para recargar al hacer clic en el botón\n      ,\n      children: \"Recargar\"\n    }, \"reload\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), renderContent(), addr !== address && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"pure-button\",\n      type: \"button\",\n      onClick: ev => {\n        ev.preventDefault();\n        const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(Number(nftsid), addr);\n      },\n      children: \"Comprar\"\n    }, \"submit\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Oneipfs, \"cCe1WtWgxkvXFfAGPyQbJnN5vXw=\", false, function () {\n  return [useDrizzle, useDrizzle, useDrizzleState];\n});\n_c = Oneipfs;\nexport default Oneipfs;\nvar _c;\n$RefreshReg$(_c, \"Oneipfs\");","map":{"version":3,"names":["React","useState","useEffect","drizzleReactHooks","jsxDEV","_jsxDEV","Fragment","_Fragment","useDrizzle","useDrizzleState","IPFS_BASE_URL","Oneipfs","nftsid","address","_s","useCacheSend","drizzle","drizzleState","state","addr","accounts","isLoading","setIsLoading","data","setData","showReloadButton","setShowReloadButton","loadData","result","contracts","NFTContract","methods","_nftMetadata","call","error","console","log","refreshContent","renderContent","children","fileName","_jsxFileName","lineNumber","columnNumber","format","src","cid","alt","style","width","height","controls","className","type","onClick","ev","preventDefault","stackId","exchangeNFTOther","cacheSend","Number","_c","$RefreshReg$"],"sources":["/home/pablo/Desktop/DAO/dapp/src/components/ipfs/oneipfs.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { drizzleReactHooks } from \"@drizzle/react-plugin\";\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst IPFS_BASE_URL = \"https://ipfs.io/ipfs/\";\n\nconst Oneipfs = ({ nftsid, address }) => {\n  const { useCacheSend } = useDrizzle(); // Solo necesitamos useCacheSend para enviar la solicitud nuevamente\n  const { drizzle } = useDrizzle();\n  const drizzleState = useDrizzleState((state) => state);\n  const addr = drizzleState.accounts[0];\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState(null); // Almacenamos los datos en estado\n  const [showReloadButton, setShowReloadButton] = useState(false); // Estado para mostrar el botón de recarga\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const result = await drizzle.contracts.NFTContract.methods._nftMetadata(nftsid).call();\n        setData(result);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error al cargar datos:\", error);\n        setShowReloadButton(true); // Mostrar el botón de recarga en caso de error\n      }\n    };\n\n    loadData(); // Cargar los datos una vez al inicio del componente\n  }, [nftsid]);\n\n  console.log(\"ID NFT\", nftsid);\n  console.log(\"Address:\", address);\n\n  const refreshContent = async () => {\n    setIsLoading(true); // Establecer isLoading en true para mostrar \"Loading...\"\n    setShowReloadButton(false); // Ocultar el botón de recarga\n    try {\n      const result = await drizzle.contracts.NFTContract.methods._nftMetadata(nftsid).call();\n      setData(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error al cargar datos:\", error);\n      setShowReloadButton(true); // Mostrar el botón de recarga en caso de error\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    switch (data.format) {\n      case \"0\":\n        return (\n          <>\n            <img\n              src={IPFS_BASE_URL + data.cid}\n              alt=\"Imagen IPFS\"\n              style={{ width: \"200px\", height: \"200px\" }}\n            />\n            {/* Resto del contenido */}\n          </>\n        );\n      case \"1\":\n        return (\n          <>\n            <video\n              controls\n              src={IPFS_BASE_URL + data.cid}\n              style={{ width: \"200px\", height: \"200px\" }}\n            />\n            {/* Resto del contenido */}\n          </>\n        );\n      case \"2\":\n        return (\n          <>\n            <audio controls src={IPFS_BASE_URL + data.cid} />\n            {/* Resto del contenido */}\n          </>\n        );\n      default:\n        return <p>Formato desconocido</p>;\n    }\n  };\n\n  return (\n    <>\n      {showReloadButton && (\n        <button\n          key=\"reload\"\n          className=\"pure-button\"\n          type=\"button\"\n          onClick={refreshContent} // Llamar a la función para recargar al hacer clic en el botón\n        >\n          Recargar\n        </button>\n      )}\n      {renderContent()}\n      {addr !== address && (\n        <button\n          key=\"submit\"\n          className=\"pure-button\"\n          type=\"button\"\n          onClick={(ev) => {\n            ev.preventDefault();\n            const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(\n              Number(nftsid),\n              addr\n            );\n          }}\n        >\n          Comprar\n        </button>\n      )}\n    </>\n  );\n};\n\nexport default Oneipfs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}