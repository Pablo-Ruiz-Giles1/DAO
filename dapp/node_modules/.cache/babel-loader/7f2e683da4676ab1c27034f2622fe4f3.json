{"ast":null,"code":"var _jsxFileName = \"/home/pablo/Desktop/DAO/dapp/src/components/company/tokens/TokenCompanyswitch.js\",\n  _s = $RefreshSig$();\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useDrizzle,\n  useDrizzleState\n} = drizzleReactHooks;\nconst TokenCompanyswitch = ({\n  traductores,\n  longitud\n}) => {\n  _s();\n  const {\n    useCacheCall\n  } = useDrizzle();\n  const {\n    drizzle\n  } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectedData2Option1, setSelectedData2Option1] = useState('');\n  const [textInput1, setTextInput1] = useState('');\n  const [isFormFilled, setIsFormFilled] = useState(false);\n  const handleChangeOption1 = event => {\n    var _traductores;\n    const selectedIndex = event.target.selectedIndex;\n    setSelectedOption('option1');\n    setSelectedData2Option1(((_traductores = traductores[selectedIndex - 1]) === null || _traductores === void 0 ? void 0 : _traductores.data2) || '');\n  };\n\n  // Check if the form is filled whenever any of the input values change\n  useEffect(() => {\n    const isDropdownFilled = selectedOption !== '';\n    const isTextInput1Filled = textInput1.trim() !== '';\n    const isTextInput2Filled = textInput2.trim() !== '';\n    setIsFormFilled(isDropdownFilled && isTextInput1Filled && isTextInput2Filled);\n  }, [selectedOption, textInput1, textInput2]);\n\n  // Función que se ejecutará al hacer clic en el botón \"Submit\"\n  const handleSubmit = ev => {\n    ev.preventDefault();\n\n    // Lógica para la opción \n\n    console.log('Formulario enviado para la opción 1');\n    // Aquí puedes realizar las acciones específicas para la opción 1\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Selecciona empresa\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedData2Option1,\n            onChange: handleChangeOption1,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Seleccionar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 11\n            }, this), Array.from({\n              length: longitud\n            }, (_, i) => {\n              var _traductores$i, _traductores$i2;\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: (_traductores$i = traductores[i]) === null || _traductores$i === void 0 ? void 0 : _traductores$i.data2,\n                children: [\" \", (_traductores$i2 = traductores[i]) === null || _traductores$i2 === void 0 ? void 0 : _traductores$i2.data1, \" \"]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 13\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(TokenCompanyswitch, \"+PCq9+of8NFO6JLBBwyJ4W1aNok=\", false, function () {\n  return [useDrizzle, useDrizzle, useDrizzleState];\n});\n_c = TokenCompanyswitch;\nexport default TokenCompanyswitch;\nvar _c;\n$RefreshReg$(_c, \"TokenCompanyswitch\");","map":{"version":3,"names":["drizzleReactHooks","React","useState","useEffect","Link","jsxDEV","_jsxDEV","useDrizzle","useDrizzleState","TokenCompanyswitch","traductores","longitud","_s","useCacheCall","drizzle","drizzleState","state","selectedOption","setSelectedOption","selectedData2Option1","setSelectedData2Option1","textInput1","setTextInput1","isFormFilled","setIsFormFilled","handleChangeOption1","event","_traductores","selectedIndex","target","data2","isDropdownFilled","isTextInput1Filled","trim","isTextInput2Filled","textInput2","handleSubmit","ev","preventDefault","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","Array","from","length","_","i","_traductores$i","_traductores$i2","data1","_c","$RefreshReg$"],"sources":["/home/pablo/Desktop/DAO/dapp/src/components/company/tokens/TokenCompanyswitch.js"],"sourcesContent":["import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\n\n\n\nconst TokenCompanyswitch = ({ traductores, longitud }) => {\n  const { useCacheCall } = useDrizzle();\n\n\n\n\n  const { drizzle } = useDrizzle();\n\n  const drizzleState = useDrizzleState(state => state);\n\n\n\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectedData2Option1, setSelectedData2Option1] = useState('');\n\n  const [textInput1, setTextInput1] = useState('');\n\n  const [isFormFilled, setIsFormFilled] = useState(false);\n\n  const handleChangeOption1 = (event) => {\n    const selectedIndex = event.target.selectedIndex;\n    setSelectedOption('option1');\n    setSelectedData2Option1(traductores[selectedIndex - 1]?.data2 || '');\n  };\n\n\n\n  // Check if the form is filled whenever any of the input values change\n  useEffect(() => {\n    const isDropdownFilled = selectedOption !== '';\n    const isTextInput1Filled = textInput1.trim() !== '';\n    const isTextInput2Filled = textInput2.trim() !== '';\n\n    setIsFormFilled(isDropdownFilled && isTextInput1Filled && isTextInput2Filled);\n  }, [selectedOption, textInput1, textInput2]);\n\n\n\n\n// Función que se ejecutará al hacer clic en el botón \"Submit\"\nconst handleSubmit = (ev) => {\n    ev.preventDefault();\n    \n      // Lógica para la opción \n      \n      console.log('Formulario enviado para la opción 1');\n      // Aquí puedes realizar las acciones específicas para la opción 1\n \n\n      \n  \n  \n  };\n\n\n\n  return (\n    <div>\n\n\n      \n  <div>\n    <p></p>\n    <form>\n      <label>\n        Selecciona empresa\n        <select value={selectedData2Option1} onChange={handleChangeOption1}>\n          <option value=\"\">Seleccionar</option>\n          {Array.from({ length: longitud }, (_, i) => (\n            <option key={i} value={traductores[i]?.data2}> {/* Aquí se usa traductores[i]?.data2 */}\n              {traductores[i]?.data1} {/* Aquí se muestra el nombre del traductor */}\n            </option>\n          ))}\n        </select>\n      </label>\n    </form>\n  </div>\n\n     </div>\n  );\n};\n\nexport default TokenCompanyswitch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}