{"ast":null,"code":"var _jsxFileName = \"/home/pablo/Desktop/DAO/dapp/src/components/ipfs/oneipfs.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { drizzleReactHooks } from \"@drizzle/react-plugin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  useDrizzle,\n  useDrizzleState,\n  useCacheCall\n} = drizzleReactHooks;\nconst IPFS_BASE_URL = \"https://ipfs.io/ipfs/\";\nconst Oneipfs = ({\n  nftsid,\n  address\n}) => {\n  _s2();\n  const {\n    useCacheCall,\n    useCacheSend\n  } = useDrizzle(); // Agregamos useCacheSend\n  const {\n    drizzle\n  } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const addr = drizzleState.accounts[0];\n  const [isLoading, setIsLoading] = useState(true);\n  let data = useCacheCall(\"NFTContract\", \"_nftMetadata\", nftsid);\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    const loadDataInterval = setInterval(_s(() => {\n      _s();\n      data = useCacheCall(\"NFTContract\", \"_nftMetadata\", nftsid);\n      if (data) {\n        setIsLoading(false);\n        clearInterval(loadDataInterval);\n      }\n    }, \"z/G/cQg1FB0V0MhOHt7+f9dwEEc=\", false, function () {\n      return [useCacheCall];\n    }), 1000);\n    return () => {\n      clearInterval(loadDataInterval);\n    };\n  }, [nftsid]);\n  console.log(\"ID NFT\", nftsid);\n  console.log(\"Address:\", address);\n  const refreshContent = () => {\n    // Esta función se llamará cuando se haga clic en el botón \"Recargar\"\n    setIsLoading(true); // Volver a establecer isLoading en true\n    const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(Number(nftsid), addr);\n  };\n  const renderContent = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }, this);\n    }\n    switch (data.format) {\n      case \"0\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: IPFS_BASE_URL + data.cid,\n            alt: \"Imagen IPFS\",\n            style: {\n              width: \"200px\",\n              height: \"200px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      case \"1\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            controls: true,\n            src: IPFS_BASE_URL + data.cid,\n            style: {\n              width: \"200px\",\n              height: \"200px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      case \"2\":\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            src: IPFS_BASE_URL + data.cid\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Formato desconocido\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [renderContent(), addr !== address && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pure-button\",\n        type: \"button\",\n        onClick: refreshContent // Llamar a la función para recargar al hacer clic en el botón\n        ,\n        children: \"Recargar\"\n      }, \"reload\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pure-button\",\n        type: \"button\",\n        onClick: ev => {\n          ev.preventDefault();\n          const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(Number(nftsid), addr);\n        },\n        children: \"Comprar\"\n      }, \"submit\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n_s2(Oneipfs, \"Bc6ngTe1W2hQz918BOHnXrREKiY=\", false, function () {\n  return [useDrizzle, useDrizzle, useDrizzleState, useCacheCall];\n});\n_c = Oneipfs;\nexport default Oneipfs;\nvar _c;\n$RefreshReg$(_c, \"Oneipfs\");","map":{"version":3,"names":["React","useState","useEffect","drizzleReactHooks","jsxDEV","_jsxDEV","Fragment","_Fragment","useDrizzle","useDrizzleState","useCacheCall","IPFS_BASE_URL","Oneipfs","nftsid","address","_s2","useCacheSend","drizzle","drizzleState","state","addr","accounts","isLoading","setIsLoading","data","_s","$RefreshSig$","loadDataInterval","setInterval","clearInterval","console","log","refreshContent","stackId","contracts","NFTContract","methods","exchangeNFTOther","cacheSend","Number","renderContent","children","fileName","_jsxFileName","lineNumber","columnNumber","format","src","cid","alt","style","width","height","controls","className","type","onClick","ev","preventDefault","_c","$RefreshReg$"],"sources":["/home/pablo/Desktop/DAO/dapp/src/components/ipfs/oneipfs.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { drizzleReactHooks } from \"@drizzle/react-plugin\";\n\nconst { useDrizzle, useDrizzleState, useCacheCall } = drizzleReactHooks;\n\nconst IPFS_BASE_URL = \"https://ipfs.io/ipfs/\";\n\nconst Oneipfs = ({ nftsid, address }) => {\n  const { useCacheCall, useCacheSend } = useDrizzle(); // Agregamos useCacheSend\n  const { drizzle } = useDrizzle();\n  const drizzleState = useDrizzleState((state) => state);\n  const addr = drizzleState.accounts[0];\n  const [isLoading, setIsLoading] = useState(true);\n  let data = useCacheCall(\"NFTContract\", \"_nftMetadata\", nftsid);\n\n  useEffect(() => {\n    const loadDataInterval = setInterval(() => {\n      data = useCacheCall(\"NFTContract\", \"_nftMetadata\", nftsid);\n\n      if (data) {\n        setIsLoading(false);\n        clearInterval(loadDataInterval);\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(loadDataInterval);\n    };\n  }, [nftsid]);\n\n  console.log(\"ID NFT\", nftsid);\n  console.log(\"Address:\", address);\n\n  const refreshContent = () => {\n    // Esta función se llamará cuando se haga clic en el botón \"Recargar\"\n    setIsLoading(true); // Volver a establecer isLoading en true\n    const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(Number(nftsid), addr);\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    switch (data.format) {\n      case \"0\":\n        return (\n          <>\n            <img\n              src={IPFS_BASE_URL + data.cid}\n              alt=\"Imagen IPFS\"\n              style={{ width: \"200px\", height: \"200px\" }}\n            />\n            {/* Resto del contenido */}\n          </>\n        );\n      case \"1\":\n        return (\n          <>\n            <video\n              controls\n              src={IPFS_BASE_URL + data.cid}\n              style={{ width: \"200px\", height: \"200px\" }}\n            />\n            {/* Resto del contenido */}\n          </>\n        );\n      case \"2\":\n        return (\n          <>\n            <audio controls src={IPFS_BASE_URL + data.cid} />\n            {/* Resto del contenido */}\n          </>\n        );\n      default:\n        return <p>Formato desconocido</p>;\n    }\n  };\n\n  return (\n    <>\n      {renderContent()}\n      {addr !== address && (\n        <>\n          <button\n            key=\"reload\"\n            className=\"pure-button\"\n            type=\"button\"\n            onClick={refreshContent} // Llamar a la función para recargar al hacer clic en el botón\n          >\n            Recargar\n          </button>\n          <button\n            key=\"submit\"\n            className=\"pure-button\"\n            type=\"button\"\n            onClick={(ev) => {\n              ev.preventDefault();\n              const stackId = drizzle.contracts.NFTContract.methods.exchangeNFTOther.cacheSend(\n                Number(nftsid),\n                addr\n              );\n            }}\n          >\n            Comprar\n          </button>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Oneipfs;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,iBAAiB,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1D,MAAM;EAAEC,UAAU;EAAEC,eAAe;EAAEC;AAAa,CAAC,GAAGP,iBAAiB;AAEvE,MAAMQ,aAAa,GAAG,uBAAuB;AAE7C,MAAMC,OAAO,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAQ,CAAC,KAAK;EAAAC,GAAA;EACvC,MAAM;IAAEL,YAAY;IAAEM;EAAa,CAAC,GAAGR,UAAU,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM;IAAES;EAAQ,CAAC,GAAGT,UAAU,CAAC,CAAC;EAChC,MAAMU,YAAY,GAAGT,eAAe,CAAEU,KAAK,IAAKA,KAAK,CAAC;EACtD,MAAMC,IAAI,GAAGF,YAAY,CAACG,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAChD,IAAIuB,IAAI,GAAGd,YAAY,CAAC,aAAa,EAAE,cAAc,EAAEG,MAAM,CAAC;EAE9DX,SAAS,CAAC,MAAM;IAAA,IAAAuB,EAAA,GAAAC,YAAA;IACd,MAAMC,gBAAgB,GAAGC,WAAW,CAAAH,EAAA,CAAC,MAAM;MAAAA,EAAA;MACzCD,IAAI,GAAGd,YAAY,CAAC,aAAa,EAAE,cAAc,EAAEG,MAAM,CAAC;MAE1D,IAAIW,IAAI,EAAE;QACRD,YAAY,CAAC,KAAK,CAAC;QACnBM,aAAa,CAACF,gBAAgB,CAAC;MACjC;IACF,CAAC;MAAA,QANQjB,YAAY;IAAA,IAMlB,IAAI,CAAC;IAER,OAAO,MAAM;MACXmB,aAAa,CAACF,gBAAgB,CAAC;IACjC,CAAC;EACH,CAAC,EAAE,CAACd,MAAM,CAAC,CAAC;EAEZiB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAElB,MAAM,CAAC;EAC7BiB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEjB,OAAO,CAAC;EAEhC,MAAMkB,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACAT,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpB,MAAMU,OAAO,GAAGhB,OAAO,CAACiB,SAAS,CAACC,WAAW,CAACC,OAAO,CAACC,gBAAgB,CAACC,SAAS,CAACC,MAAM,CAAC1B,MAAM,CAAC,EAAEO,IAAI,CAAC;EACxG,CAAC;EAED,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIlB,SAAS,EAAE;MACb,oBAAOjB,OAAA;QAAAoC,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAC1B;IAEA,QAAQrB,IAAI,CAACsB,MAAM;MACjB,KAAK,GAAG;QACN,oBACEzC,OAAA,CAAAE,SAAA;UAAAkC,QAAA,eACEpC,OAAA;YACE0C,GAAG,EAAEpC,aAAa,GAAGa,IAAI,CAACwB,GAAI;YAC9BC,GAAG,EAAC,aAAa;YACjBC,KAAK,EAAE;cAAEC,KAAK,EAAE,OAAO;cAAEC,MAAM,EAAE;YAAQ;UAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5C;QAAC,gBAEF,CAAC;MAEP,KAAK,GAAG;QACN,oBACExC,OAAA,CAAAE,SAAA;UAAAkC,QAAA,eACEpC,OAAA;YACEgD,QAAQ;YACRN,GAAG,EAAEpC,aAAa,GAAGa,IAAI,CAACwB,GAAI;YAC9BE,KAAK,EAAE;cAAEC,KAAK,EAAE,OAAO;cAAEC,MAAM,EAAE;YAAQ;UAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5C;QAAC,gBAEF,CAAC;MAEP,KAAK,GAAG;QACN,oBACExC,OAAA,CAAAE,SAAA;UAAAkC,QAAA,eACEpC,OAAA;YAAOgD,QAAQ;YAACN,GAAG,EAAEpC,aAAa,GAAGa,IAAI,CAACwB;UAAI;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC,gBAEjD,CAAC;MAEP;QACE,oBAAOxC,OAAA;UAAAoC,QAAA,EAAG;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;IACrC;EACF,CAAC;EAED,oBACExC,OAAA,CAAAE,SAAA;IAAAkC,QAAA,GACGD,aAAa,CAAC,CAAC,EACfpB,IAAI,KAAKN,OAAO,iBACfT,OAAA,CAAAE,SAAA;MAAAkC,QAAA,gBACEpC,OAAA;QAEEiD,SAAS,EAAC,aAAa;QACvBC,IAAI,EAAC,QAAQ;QACbC,OAAO,EAAExB,cAAe,CAAC;QAAA;QAAAS,QAAA,EAC1B;MAED,GANM,QAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMN,CAAC,eACTxC,OAAA;QAEEiD,SAAS,EAAC,aAAa;QACvBC,IAAI,EAAC,QAAQ;QACbC,OAAO,EAAGC,EAAE,IAAK;UACfA,EAAE,CAACC,cAAc,CAAC,CAAC;UACnB,MAAMzB,OAAO,GAAGhB,OAAO,CAACiB,SAAS,CAACC,WAAW,CAACC,OAAO,CAACC,gBAAgB,CAACC,SAAS,CAC9EC,MAAM,CAAC1B,MAAM,CAAC,EACdO,IACF,CAAC;QACH,CAAE;QAAAqB,QAAA,EACH;MAED,GAZM,QAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYN,CAAC;IAAA,eACT,CACH;EAAA,eACD,CAAC;AAEP,CAAC;AAAC9B,GAAA,CAvGIH,OAAO;EAAA,QAC4BJ,UAAU,EAC7BA,UAAU,EACTC,eAAe,EAGzBC,YAAY;AAAA;AAAAiD,EAAA,GANnB/C,OAAO;AAyGb,eAAeA,OAAO;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}