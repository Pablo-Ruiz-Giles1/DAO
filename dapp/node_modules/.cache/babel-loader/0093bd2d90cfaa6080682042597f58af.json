{"ast":null,"code":"var _jsxFileName = \"/home/pablo/Desktop/DAO/dapp/src/components/ipfs/watchipfs.js\",\n  _s = $RefreshSig$();\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport Oneipfs from './oneipfs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useDrizzle,\n  useDrizzleState\n} = drizzleReactHooks;\nconst Watchipfs = ({\n  children\n}) => {\n  _s();\n  const {\n    useCacheCall\n  } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const address = drizzleState.accounts[0];\n\n  // Obtenemos los ids de los tokens que tiene este usuario\n  const nftsidResponse = useCacheCall(\"NFTContract\", \"getNFTsByOwner\", address);\n  const nftsid = nftsidResponse ? nftsidResponse.value : [];\n  console.log(\"Vlor de nftsid\", nftsidResponse.value);\n  // Utiliza el método map para separar cada valor y llamar al componente Oneipfs\n  const renderedRows = nftsidResponse.map((nftsidValue, index) => /*#__PURE__*/_jsxDEV(Oneipfs, {\n    nftsid: nftsidValue\n  }, \"ab-\" + index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: renderedRows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n};\n_s(Watchipfs, \"wCEymNZD2k0TCMaN5WO4xCF4koI=\", true, function () {\n  return [useDrizzle, useDrizzleState];\n});\n_c = Watchipfs;\nexport default Watchipfs;\nvar _c;\n$RefreshReg$(_c, \"Watchipfs\");","map":{"version":3,"names":["drizzleReactHooks","Oneipfs","jsxDEV","_jsxDEV","useDrizzle","useDrizzleState","Watchipfs","children","_s","useCacheCall","drizzleState","state","address","accounts","nftsidResponse","nftsid","value","console","log","renderedRows","map","nftsidValue","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/pablo/Desktop/DAO/dapp/src/components/ipfs/watchipfs.js"],"sourcesContent":["import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport Oneipfs from './oneipfs';\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst Watchipfs = ({ children }) => {\n  const { useCacheCall } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const address = drizzleState.accounts[0];\n\n  // Obtenemos los ids de los tokens que tiene este usuario\n  const nftsidResponse = useCacheCall(\"NFTContract\", \"getNFTsByOwner\", address);\n  const nftsid = nftsidResponse ? nftsidResponse.value : [];\n\n  console.log(\"Vlor de nftsid\", nftsidResponse.value);\n  // Utiliza el método map para separar cada valor y llamar al componente Oneipfs\n  const renderedRows = nftsidResponse.map((nftsidValue, index) => (\n    <Oneipfs key={\"ab-\" + index} nftsid={nftsidValue} />\n  ));\n\n  return <tbody>{renderedRows}</tbody>;\n};\n\nexport default Watchipfs;\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,uBAAuB;AACzD,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAM;EAAEC,UAAU;EAAEC;AAAgB,CAAC,GAAGL,iBAAiB;AAEzD,MAAMM,SAAS,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAa,CAAC,GAAGL,UAAU,CAAC,CAAC;EACrC,MAAMM,YAAY,GAAGL,eAAe,CAACM,KAAK,IAAIA,KAAK,CAAC;EACpD,MAAMC,OAAO,GAAGF,YAAY,CAACG,QAAQ,CAAC,CAAC,CAAC;;EAExC;EACA,MAAMC,cAAc,GAAGL,YAAY,CAAC,aAAa,EAAE,gBAAgB,EAAEG,OAAO,CAAC;EAC7E,MAAMG,MAAM,GAAGD,cAAc,GAAGA,cAAc,CAACE,KAAK,GAAG,EAAE;EAEzDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,cAAc,CAACE,KAAK,CAAC;EACnD;EACA,MAAMG,YAAY,GAAGL,cAAc,CAACM,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBACzDnB,OAAA,CAACF,OAAO;IAAqBc,MAAM,EAAEM;EAAY,GAAnC,KAAK,GAAGC,KAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAwB,CACpD,CAAC;EAEF,oBAAOvB,OAAA;IAAAI,QAAA,EAAQY;EAAY;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACtC,CAAC;AAAClB,EAAA,CAhBIF,SAAS;EAAA,QACYF,UAAU,EACdC,eAAe;AAAA;AAAAsB,EAAA,GAFhCrB,SAAS;AAkBf,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}