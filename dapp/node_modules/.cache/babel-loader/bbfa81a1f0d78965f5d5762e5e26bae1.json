{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nfunction _defineEnumerableProperties(obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n  return obj;\n}\nimport { noop, kTrue, is, log as _log, check, deferred, uid as nextEffectId, array, remove, object, TASK, CANCEL, SELF_CANCELLATION, makeIterator, createSetContextWarning, deprecate, updateIncentive } from './utils';\nimport { asap, suspend, flush } from './scheduler';\nimport { asEffect } from './io';\nimport { stdChannel as _stdChannel, eventChannel, isEnd } from './channel';\nimport { buffers } from './buffers';\nexport var NOT_ITERATOR_ERROR = 'proc first argument (Saga function result) must be an iterator';\nexport var CHANNEL_END = {\n  toString: function toString() {\n    return '@@redux-saga/CHANNEL_END';\n  }\n};\nexport var TASK_CANCEL = {\n  toString: function toString() {\n    return '@@redux-saga/TASK_CANCEL';\n  }\n};\nvar matchers = {\n  wildcard: function wildcard() {\n    return kTrue;\n  },\n  default: function _default(pattern) {\n    return (typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) === 'symbol' ? function (input) {\n      return input.type === pattern;\n    } : function (input) {\n      return input.type === String(pattern);\n    };\n  },\n  array: function array(patterns) {\n    return function (input) {\n      return patterns.some(function (p) {\n        return matcher(p)(input);\n      });\n    };\n  },\n  predicate: function predicate(_predicate) {\n    return function (input) {\n      return _predicate(input);\n    };\n  }\n};\nfunction matcher(pattern) {\n  // prettier-ignore\n  return (pattern === '*' ? matchers.wildcard : is.array(pattern) ? matchers.array : is.stringableFunc(pattern) ? matchers.default : is.func(pattern) ? matchers.predicate : matchers.default)(pattern);\n}\n\n/**\n  Used to track a parent task and its forks\n  In the new fork model, forked tasks are attached by default to their parent\n  We model this using the concept of Parent task && main Task\n  main task is the main flow of the current Generator, the parent tasks is the\n  aggregation of the main tasks + all its forked tasks.\n  Thus the whole model represents an execution tree with multiple branches (vs the\n  linear execution tree in sequential (non parallel) programming)\n\n  A parent tasks has the following semantics\n  - It completes if all its forks either complete or all cancelled\n  - If it's cancelled, all forks are cancelled as well\n  - It aborts if any uncaught error bubbles up from forks\n  - If it completes, the return value is the one returned by the main task\n**/\nfunction forkQueue(name, mainTask, cb) {\n  var tasks = [],\n    result = void 0,\n    completed = false;\n  addTask(mainTask);\n  function abort(err) {\n    cancelAll();\n    cb(err, true);\n  }\n  function addTask(task) {\n    tasks.push(task);\n    task.cont = function (res, isErr) {\n      if (completed) {\n        return;\n      }\n      remove(tasks, task);\n      task.cont = noop;\n      if (isErr) {\n        abort(res);\n      } else {\n        if (task === mainTask) {\n          result = res;\n        }\n        if (!tasks.length) {\n          completed = true;\n          cb(result);\n        }\n      }\n    };\n    // task.cont.cancel = task.cancel\n  }\n\n  function cancelAll() {\n    if (completed) {\n      return;\n    }\n    completed = true;\n    tasks.forEach(function (t) {\n      t.cont = noop;\n      t.cancel();\n    });\n    tasks = [];\n  }\n  return {\n    addTask: addTask,\n    cancelAll: cancelAll,\n    abort: abort,\n    getTasks: function getTasks() {\n      return tasks;\n    },\n    taskNames: function taskNames() {\n      return tasks.map(function (t) {\n        return t.name;\n      });\n    }\n  };\n}\nfunction createTaskIterator(_ref) {\n  var context = _ref.context,\n    fn = _ref.fn,\n    args = _ref.args;\n  if (is.iterator(fn)) {\n    return fn;\n  }\n\n  // catch synchronous failures; see #152 and #441\n  var result = void 0,\n    error = void 0;\n  try {\n    result = fn.apply(context, args);\n  } catch (err) {\n    error = err;\n  }\n\n  // i.e. a generator function returns an iterator\n  if (is.iterator(result)) {\n    return result;\n  }\n\n  // do not bubble up synchronous failures for detached forks\n  // instead create a failed task. See #152 and #441\n  return error ? makeIterator(function () {\n    throw error;\n  }) : makeIterator(function () {\n    var pc = void 0;\n    var eff = {\n      done: false,\n      value: result\n    };\n    var ret = function ret(value) {\n      return {\n        done: true,\n        value: value\n      };\n    };\n    return function (arg) {\n      if (!pc) {\n        pc = true;\n        return eff;\n      } else {\n        return ret(arg);\n      }\n    };\n  }());\n}\nvar wrapHelper = function wrapHelper(helper) {\n  return {\n    fn: helper\n  };\n};\nexport default function proc(iterator) {\n  var subscribe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n    return noop;\n  };\n  var dispatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n  var getState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;\n  var parentContext = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  var parentEffectId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  var name = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'anonymous';\n  var cont = arguments[8];\n  check(iterator, is.iterator, NOT_ITERATOR_ERROR);\n  var effectsString = '[...effects]';\n  var runParallelEffect = deprecate(runAllEffect, updateIncentive(effectsString, 'all(' + effectsString + ')'));\n  var sagaMonitor = options.sagaMonitor,\n    logger = options.logger,\n    onError = options.onError;\n  var log = logger || _log;\n  var logError = function logError(err) {\n    var message = err.sagaStack;\n    if (!message && err.stack) {\n      message = err.stack.split('\\n')[0].indexOf(err.message) !== -1 ? err.stack : 'Error: ' + err.message + '\\n' + err.stack;\n    }\n    log('error', 'uncaught at ' + name, message || err.message || err);\n  };\n  var stdChannel = _stdChannel(subscribe);\n  var taskContext = Object.create(parentContext);\n  /**\n    Tracks the current effect cancellation\n    Each time the generator progresses. calling runEffect will set a new value\n    on it. It allows propagating cancellation to child effects\n  **/\n  next.cancel = noop;\n\n  /**\n    Creates a new task descriptor for this generator, We'll also create a main task\n    to track the main flow (besides other forked tasks)\n  **/\n  var task = newTask(parentEffectId, name, iterator, cont);\n  var mainTask = {\n    name: name,\n    cancel: cancelMain,\n    isRunning: true\n  };\n  var taskQueue = forkQueue(name, mainTask, end);\n\n  /**\n    cancellation of the main task. We'll simply resume the Generator with a Cancel\n  **/\n  function cancelMain() {\n    if (mainTask.isRunning && !mainTask.isCancelled) {\n      mainTask.isCancelled = true;\n      next(TASK_CANCEL);\n    }\n  }\n\n  /**\n    This may be called by a parent generator to trigger/propagate cancellation\n    cancel all pending tasks (including the main task), then end the current task.\n     Cancellation propagates down to the whole execution tree holded by this Parent task\n    It's also propagated to all joiners of this task and their execution tree/joiners\n     Cancellation is noop for terminated/Cancelled tasks tasks\n  **/\n  function cancel() {\n    /**\n      We need to check both Running and Cancelled status\n      Tasks can be Cancelled but still Running\n    **/\n    if (iterator._isRunning && !iterator._isCancelled) {\n      iterator._isCancelled = true;\n      taskQueue.cancelAll();\n      /**\n        Ending with a Never result will propagate the Cancellation to all joiners\n      **/\n      end(TASK_CANCEL);\n    }\n  }\n  /**\n    attaches cancellation logic to this task's continuation\n    this will permit cancellation to propagate down the call chain\n  **/\n  cont && (cont.cancel = cancel);\n\n  // tracks the running status\n  iterator._isRunning = true;\n\n  // kicks up the generator\n  next();\n\n  // then return the task descriptor to the caller\n  return task;\n\n  /**\n    This is the generator driver\n    It's a recursive async/continuation function which calls itself\n    until the generator terminates or throws\n  **/\n  function next(arg, isErr) {\n    // Preventive measure. If we end up here, then there is really something wrong\n    if (!mainTask.isRunning) {\n      throw new Error('Trying to resume an already finished generator');\n    }\n    try {\n      var result = void 0;\n      if (isErr) {\n        result = iterator.throw(arg);\n      } else if (arg === TASK_CANCEL) {\n        /**\n          getting TASK_CANCEL automatically cancels the main task\n          We can get this value here\n           - By cancelling the parent task manually\n          - By joining a Cancelled task\n        **/\n        mainTask.isCancelled = true;\n        /**\n          Cancels the current effect; this will propagate the cancellation down to any called tasks\n        **/\n        next.cancel();\n        /**\n          If this Generator has a `return` method then invokes it\n          This will jump to the finally block\n        **/\n        result = is.func(iterator.return) ? iterator.return(TASK_CANCEL) : {\n          done: true,\n          value: TASK_CANCEL\n        };\n      } else if (arg === CHANNEL_END) {\n        // We get CHANNEL_END by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)\n        result = is.func(iterator.return) ? iterator.return() : {\n          done: true\n        };\n      } else {\n        result = iterator.next(arg);\n      }\n      if (!result.done) {\n        runEffect(result.value, parentEffectId, '', next);\n      } else {\n        /**\n          This Generator has ended, terminate the main task and notify the fork queue\n        **/\n        mainTask.isMainRunning = false;\n        mainTask.cont && mainTask.cont(result.value);\n      }\n    } catch (error) {\n      if (mainTask.isCancelled) {\n        logError(error);\n      }\n      mainTask.isMainRunning = false;\n      mainTask.cont(error, true);\n    }\n  }\n  function end(result, isErr) {\n    iterator._isRunning = false;\n    stdChannel.close();\n    if (!isErr) {\n      iterator._result = result;\n      iterator._deferredEnd && iterator._deferredEnd.resolve(result);\n    } else {\n      if (result instanceof Error) {\n        Object.defineProperty(result, 'sagaStack', {\n          value: 'at ' + name + ' \\n ' + (result.sagaStack || result.stack),\n          configurable: true\n        });\n      }\n      if (!task.cont) {\n        if (result instanceof Error && onError) {\n          onError(result);\n        } else {\n          logError(result);\n        }\n      }\n      iterator._error = result;\n      iterator._isAborted = true;\n      iterator._deferredEnd && iterator._deferredEnd.reject(result);\n    }\n    task.cont && task.cont(result, isErr);\n    task.joiners.forEach(function (j) {\n      return j.cb(result, isErr);\n    });\n    task.joiners = null;\n  }\n  function runEffect(effect, parentEffectId) {\n    var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var cb = arguments[3];\n    var effectId = nextEffectId();\n    sagaMonitor && sagaMonitor.effectTriggered({\n      effectId: effectId,\n      parentEffectId: parentEffectId,\n      label: label,\n      effect: effect\n    });\n\n    /**\n      completion callback and cancel callback are mutually exclusive\n      We can't cancel an already completed effect\n      And We can't complete an already cancelled effectId\n    **/\n    var effectSettled = void 0;\n\n    // Completion callback passed to the appropriate effect runner\n    function currCb(res, isErr) {\n      if (effectSettled) {\n        return;\n      }\n      effectSettled = true;\n      cb.cancel = noop; // defensive measure\n      if (sagaMonitor) {\n        isErr ? sagaMonitor.effectRejected(effectId, res) : sagaMonitor.effectResolved(effectId, res);\n      }\n      cb(res, isErr);\n    }\n    // tracks down the current cancel\n    currCb.cancel = noop;\n\n    // setup cancellation logic on the parent cb\n    cb.cancel = function () {\n      // prevents cancelling an already completed effect\n      if (effectSettled) {\n        return;\n      }\n      effectSettled = true;\n      /**\n        propagates cancel downward\n        catch uncaught cancellations errors; since we can no longer call the completion\n        callback, log errors raised during cancellations into the console\n      **/\n      try {\n        currCb.cancel();\n      } catch (err) {\n        logError(err);\n      }\n      currCb.cancel = noop; // defensive measure\n\n      sagaMonitor && sagaMonitor.effectCancelled(effectId);\n    };\n\n    /**\n      each effect runner must attach its own logic of cancellation to the provided callback\n      it allows this generator to propagate cancellation downward.\n       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]\n      And the setup must occur before calling the callback\n       This is a sort of inversion of control: called async functions are responsible\n      for completing the flow by calling the provided continuation; while caller functions\n      are responsible for aborting the current flow by calling the attached cancel function\n       Library users can attach their own cancellation logic to promises by defining a\n      promise[CANCEL] method in their returned promises\n      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect\n    **/\n    var data = void 0;\n    // prettier-ignore\n    return (\n      // Non declarative effect\n      is.promise(effect) ? resolvePromise(effect, currCb) : is.helper(effect) ? runForkEffect(wrapHelper(effect), effectId, currCb) : is.iterator(effect) ? resolveIterator(effect, effectId, name, currCb)\n\n      // declarative effects\n      : is.array(effect) ? runParallelEffect(effect, effectId, currCb) : (data = asEffect.take(effect)) ? runTakeEffect(data, currCb) : (data = asEffect.put(effect)) ? runPutEffect(data, currCb) : (data = asEffect.all(effect)) ? runAllEffect(data, effectId, currCb) : (data = asEffect.race(effect)) ? runRaceEffect(data, effectId, currCb) : (data = asEffect.call(effect)) ? runCallEffect(data, effectId, currCb) : (data = asEffect.cps(effect)) ? runCPSEffect(data, currCb) : (data = asEffect.fork(effect)) ? runForkEffect(data, effectId, currCb) : (data = asEffect.join(effect)) ? runJoinEffect(data, currCb) : (data = asEffect.cancel(effect)) ? runCancelEffect(data, currCb) : (data = asEffect.select(effect)) ? runSelectEffect(data, currCb) : (data = asEffect.actionChannel(effect)) ? runChannelEffect(data, currCb) : (data = asEffect.flush(effect)) ? runFlushEffect(data, currCb) : (data = asEffect.cancelled(effect)) ? runCancelledEffect(data, currCb) : (data = asEffect.getContext(effect)) ? runGetContextEffect(data, currCb) : (data = asEffect.setContext(effect)) ? runSetContextEffect(data, currCb) : /* anything else returned as is */currCb(effect)\n    );\n  }\n  function resolvePromise(promise, cb) {\n    var cancelPromise = promise[CANCEL];\n    if (is.func(cancelPromise)) {\n      cb.cancel = cancelPromise;\n    } else if (is.func(promise.abort)) {\n      cb.cancel = function () {\n        return promise.abort();\n      };\n      // TODO: add support for the fetch API, whenever they get around to\n      // adding cancel support\n    }\n\n    promise.then(cb, function (error) {\n      return cb(error, true);\n    });\n  }\n  function resolveIterator(iterator, effectId, name, cb) {\n    proc(iterator, subscribe, dispatch, getState, taskContext, options, effectId, name, cb);\n  }\n  function runTakeEffect(_ref2, cb) {\n    var channel = _ref2.channel,\n      pattern = _ref2.pattern,\n      maybe = _ref2.maybe;\n    channel = channel || stdChannel;\n    var takeCb = function takeCb(inp) {\n      return inp instanceof Error ? cb(inp, true) : isEnd(inp) && !maybe ? cb(CHANNEL_END) : cb(inp);\n    };\n    try {\n      channel.take(takeCb, matcher(pattern));\n    } catch (err) {\n      return cb(err, true);\n    }\n    cb.cancel = takeCb.cancel;\n  }\n  function runPutEffect(_ref3, cb) {\n    var channel = _ref3.channel,\n      action = _ref3.action,\n      resolve = _ref3.resolve;\n\n    /**\n      Schedule the put in case another saga is holding a lock.\n      The put will be executed atomically. ie nested puts will execute after\n      this put has terminated.\n    **/\n    asap(function () {\n      var result = void 0;\n      try {\n        result = (channel ? channel.put : dispatch)(action);\n      } catch (error) {\n        // If we have a channel or `put.resolve` was used then bubble up the error.\n        if (channel || resolve) return cb(error, true);\n        logError(error);\n      }\n      if (resolve && is.promise(result)) {\n        resolvePromise(result, cb);\n      } else {\n        return cb(result);\n      }\n    });\n    // Put effects are non cancellables\n  }\n\n  function runCallEffect(_ref4, effectId, cb) {\n    var context = _ref4.context,\n      fn = _ref4.fn,\n      args = _ref4.args;\n    var result = void 0;\n    // catch synchronous failures; see #152\n    try {\n      result = fn.apply(context, args);\n    } catch (error) {\n      return cb(error, true);\n    }\n    return is.promise(result) ? resolvePromise(result, cb) : is.iterator(result) ? resolveIterator(result, effectId, fn.name, cb) : cb(result);\n  }\n  function runCPSEffect(_ref5, cb) {\n    var context = _ref5.context,\n      fn = _ref5.fn,\n      args = _ref5.args;\n\n    // CPS (ie node style functions) can define their own cancellation logic\n    // by setting cancel field on the cb\n\n    // catch synchronous failures; see #152\n    try {\n      var cpsCb = function cpsCb(err, res) {\n        return is.undef(err) ? cb(res) : cb(err, true);\n      };\n      fn.apply(context, args.concat(cpsCb));\n      if (cpsCb.cancel) {\n        cb.cancel = function () {\n          return cpsCb.cancel();\n        };\n      }\n    } catch (error) {\n      return cb(error, true);\n    }\n  }\n  function runForkEffect(_ref6, effectId, cb) {\n    var context = _ref6.context,\n      fn = _ref6.fn,\n      args = _ref6.args,\n      detached = _ref6.detached;\n    var taskIterator = createTaskIterator({\n      context: context,\n      fn: fn,\n      args: args\n    });\n    try {\n      suspend();\n      var _task = proc(taskIterator, subscribe, dispatch, getState, taskContext, options, effectId, fn.name, detached ? null : noop);\n      if (detached) {\n        cb(_task);\n      } else {\n        if (taskIterator._isRunning) {\n          taskQueue.addTask(_task);\n          cb(_task);\n        } else if (taskIterator._error) {\n          taskQueue.abort(taskIterator._error);\n        } else {\n          cb(_task);\n        }\n      }\n    } finally {\n      flush();\n    }\n    // Fork effects are non cancellables\n  }\n\n  function runJoinEffect(t, cb) {\n    if (t.isRunning()) {\n      var joiner = {\n        task: task,\n        cb: cb\n      };\n      cb.cancel = function () {\n        return remove(t.joiners, joiner);\n      };\n      t.joiners.push(joiner);\n    } else {\n      t.isAborted() ? cb(t.error(), true) : cb(t.result());\n    }\n  }\n  function runCancelEffect(taskToCancel, cb) {\n    if (taskToCancel === SELF_CANCELLATION) {\n      taskToCancel = task;\n    }\n    if (taskToCancel.isRunning()) {\n      taskToCancel.cancel();\n    }\n    cb();\n    // cancel effects are non cancellables\n  }\n\n  function runAllEffect(effects, effectId, cb) {\n    var keys = Object.keys(effects);\n    if (!keys.length) {\n      return cb(is.array(effects) ? [] : {});\n    }\n    var completedCount = 0;\n    var completed = void 0;\n    var results = {};\n    var childCbs = {};\n    function checkEffectEnd() {\n      if (completedCount === keys.length) {\n        completed = true;\n        cb(is.array(effects) ? array.from(_extends({}, results, {\n          length: keys.length\n        })) : results);\n      }\n    }\n    keys.forEach(function (key) {\n      var chCbAtKey = function chCbAtKey(res, isErr) {\n        if (completed) {\n          return;\n        }\n        if (isErr || isEnd(res) || res === CHANNEL_END || res === TASK_CANCEL) {\n          cb.cancel();\n          cb(res, isErr);\n        } else {\n          results[key] = res;\n          completedCount++;\n          checkEffectEnd();\n        }\n      };\n      chCbAtKey.cancel = noop;\n      childCbs[key] = chCbAtKey;\n    });\n    cb.cancel = function () {\n      if (!completed) {\n        completed = true;\n        keys.forEach(function (key) {\n          return childCbs[key].cancel();\n        });\n      }\n    };\n    keys.forEach(function (key) {\n      return runEffect(effects[key], effectId, key, childCbs[key]);\n    });\n  }\n  function runRaceEffect(effects, effectId, cb) {\n    var completed = void 0;\n    var keys = Object.keys(effects);\n    var childCbs = {};\n    keys.forEach(function (key) {\n      var chCbAtKey = function chCbAtKey(res, isErr) {\n        if (completed) {\n          return;\n        }\n        if (isErr) {\n          // Race Auto cancellation\n          cb.cancel();\n          cb(res, true);\n        } else if (!isEnd(res) && res !== CHANNEL_END && res !== TASK_CANCEL) {\n          var _response;\n          cb.cancel();\n          completed = true;\n          var response = (_response = {}, _response[key] = res, _response);\n          cb(is.array(effects) ? [].slice.call(_extends({}, response, {\n            length: keys.length\n          })) : response);\n        }\n      };\n      chCbAtKey.cancel = noop;\n      childCbs[key] = chCbAtKey;\n    });\n    cb.cancel = function () {\n      // prevents unnecessary cancellation\n      if (!completed) {\n        completed = true;\n        keys.forEach(function (key) {\n          return childCbs[key].cancel();\n        });\n      }\n    };\n    keys.forEach(function (key) {\n      if (completed) {\n        return;\n      }\n      runEffect(effects[key], effectId, key, childCbs[key]);\n    });\n  }\n  function runSelectEffect(_ref7, cb) {\n    var selector = _ref7.selector,\n      args = _ref7.args;\n    try {\n      var state = selector.apply(undefined, [getState()].concat(args));\n      cb(state);\n    } catch (error) {\n      cb(error, true);\n    }\n  }\n  function runChannelEffect(_ref8, cb) {\n    var pattern = _ref8.pattern,\n      buffer = _ref8.buffer;\n    var match = matcher(pattern);\n    match.pattern = pattern;\n    cb(eventChannel(subscribe, buffer || buffers.fixed(), match));\n  }\n  function runCancelledEffect(data, cb) {\n    cb(!!mainTask.isCancelled);\n  }\n  function runFlushEffect(channel, cb) {\n    channel.flush(cb);\n  }\n  function runGetContextEffect(prop, cb) {\n    cb(taskContext[prop]);\n  }\n  function runSetContextEffect(props, cb) {\n    object.assign(taskContext, props);\n    cb();\n  }\n  function newTask(id, name, iterator, cont) {\n    var _done, _ref9, _mutatorMap;\n    iterator._deferredEnd = null;\n    return _ref9 = {}, _ref9[TASK] = true, _ref9.id = id, _ref9.name = name, _done = 'done', _mutatorMap = {}, _mutatorMap[_done] = _mutatorMap[_done] || {}, _mutatorMap[_done].get = function () {\n      if (iterator._deferredEnd) {\n        return iterator._deferredEnd.promise;\n      } else {\n        var def = deferred();\n        iterator._deferredEnd = def;\n        if (!iterator._isRunning) {\n          iterator._error ? def.reject(iterator._error) : def.resolve(iterator._result);\n        }\n        return def.promise;\n      }\n    }, _ref9.cont = cont, _ref9.joiners = [], _ref9.cancel = cancel, _ref9.isRunning = function isRunning() {\n      return iterator._isRunning;\n    }, _ref9.isCancelled = function isCancelled() {\n      return iterator._isCancelled;\n    }, _ref9.isAborted = function isAborted() {\n      return iterator._isAborted;\n    }, _ref9.result = function result() {\n      return iterator._result;\n    }, _ref9.error = function error() {\n      return iterator._error;\n    }, _ref9.setContext = function setContext(props) {\n      check(props, is.object, createSetContextWarning('task', props));\n      object.assign(taskContext, props);\n    }, _defineEnumerableProperties(_ref9, _mutatorMap), _ref9;\n  }\n}","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_typeof","Symbol","iterator","obj","constructor","_defineEnumerableProperties","descs","desc","configurable","enumerable","writable","defineProperty","noop","kTrue","is","log","_log","check","deferred","uid","nextEffectId","array","remove","object","TASK","CANCEL","SELF_CANCELLATION","makeIterator","createSetContextWarning","deprecate","updateIncentive","asap","suspend","flush","asEffect","stdChannel","_stdChannel","eventChannel","isEnd","buffers","NOT_ITERATOR_ERROR","CHANNEL_END","toString","TASK_CANCEL","matchers","wildcard","default","_default","pattern","input","type","String","patterns","some","p","matcher","predicate","_predicate","stringableFunc","func","forkQueue","name","mainTask","cb","tasks","result","completed","addTask","abort","err","cancelAll","task","push","cont","res","isErr","forEach","t","cancel","getTasks","taskNames","map","createTaskIterator","_ref","context","fn","args","error","apply","pc","eff","done","value","ret","arg","wrapHelper","helper","proc","subscribe","undefined","dispatch","getState","parentContext","options","parentEffectId","effectsString","runParallelEffect","runAllEffect","sagaMonitor","logger","onError","logError","message","sagaStack","stack","split","indexOf","taskContext","create","next","newTask","cancelMain","isRunning","taskQueue","end","isCancelled","_isRunning","_isCancelled","Error","throw","return","runEffect","isMainRunning","close","_result","_deferredEnd","resolve","_error","_isAborted","reject","joiners","j","effect","label","effectId","effectTriggered","effectSettled","currCb","effectRejected","effectResolved","effectCancelled","data","promise","resolvePromise","runForkEffect","resolveIterator","take","runTakeEffect","put","runPutEffect","all","race","runRaceEffect","runCallEffect","cps","runCPSEffect","fork","join","runJoinEffect","runCancelEffect","select","runSelectEffect","actionChannel","runChannelEffect","runFlushEffect","cancelled","runCancelledEffect","getContext","runGetContextEffect","setContext","runSetContextEffect","cancelPromise","then","_ref2","channel","maybe","takeCb","inp","_ref3","action","_ref4","_ref5","cpsCb","undef","concat","_ref6","detached","taskIterator","_task","joiner","isAborted","taskToCancel","effects","keys","completedCount","results","childCbs","checkEffectEnd","from","chCbAtKey","_response","response","slice","_ref7","selector","state","_ref8","buffer","match","fixed","prop","props","id","_done","_ref9","_mutatorMap","get","def"],"sources":["/home/pablo/Desktop/DAO/dapp/node_modules/redux-saga/es/internal/proc.js"],"sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _defineEnumerableProperties(obj, descs) { for (var key in descs) { var desc = descs[key]; desc.configurable = desc.enumerable = true; if (\"value\" in desc) desc.writable = true; Object.defineProperty(obj, key, desc); } return obj; }\n\nimport { noop, kTrue, is, log as _log, check, deferred, uid as nextEffectId, array, remove, object, TASK, CANCEL, SELF_CANCELLATION, makeIterator, createSetContextWarning, deprecate, updateIncentive } from './utils';\nimport { asap, suspend, flush } from './scheduler';\nimport { asEffect } from './io';\nimport { stdChannel as _stdChannel, eventChannel, isEnd } from './channel';\nimport { buffers } from './buffers';\n\nexport var NOT_ITERATOR_ERROR = 'proc first argument (Saga function result) must be an iterator';\n\nexport var CHANNEL_END = {\n  toString: function toString() {\n    return '@@redux-saga/CHANNEL_END';\n  }\n};\nexport var TASK_CANCEL = {\n  toString: function toString() {\n    return '@@redux-saga/TASK_CANCEL';\n  }\n};\n\nvar matchers = {\n  wildcard: function wildcard() {\n    return kTrue;\n  },\n  default: function _default(pattern) {\n    return (typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) === 'symbol' ? function (input) {\n      return input.type === pattern;\n    } : function (input) {\n      return input.type === String(pattern);\n    };\n  },\n  array: function array(patterns) {\n    return function (input) {\n      return patterns.some(function (p) {\n        return matcher(p)(input);\n      });\n    };\n  },\n  predicate: function predicate(_predicate) {\n    return function (input) {\n      return _predicate(input);\n    };\n  }\n};\n\nfunction matcher(pattern) {\n  // prettier-ignore\n  return (pattern === '*' ? matchers.wildcard : is.array(pattern) ? matchers.array : is.stringableFunc(pattern) ? matchers.default : is.func(pattern) ? matchers.predicate : matchers.default)(pattern);\n}\n\n/**\n  Used to track a parent task and its forks\n  In the new fork model, forked tasks are attached by default to their parent\n  We model this using the concept of Parent task && main Task\n  main task is the main flow of the current Generator, the parent tasks is the\n  aggregation of the main tasks + all its forked tasks.\n  Thus the whole model represents an execution tree with multiple branches (vs the\n  linear execution tree in sequential (non parallel) programming)\n\n  A parent tasks has the following semantics\n  - It completes if all its forks either complete or all cancelled\n  - If it's cancelled, all forks are cancelled as well\n  - It aborts if any uncaught error bubbles up from forks\n  - If it completes, the return value is the one returned by the main task\n**/\nfunction forkQueue(name, mainTask, cb) {\n  var tasks = [],\n      result = void 0,\n      completed = false;\n  addTask(mainTask);\n\n  function abort(err) {\n    cancelAll();\n    cb(err, true);\n  }\n\n  function addTask(task) {\n    tasks.push(task);\n    task.cont = function (res, isErr) {\n      if (completed) {\n        return;\n      }\n\n      remove(tasks, task);\n      task.cont = noop;\n      if (isErr) {\n        abort(res);\n      } else {\n        if (task === mainTask) {\n          result = res;\n        }\n        if (!tasks.length) {\n          completed = true;\n          cb(result);\n        }\n      }\n    };\n    // task.cont.cancel = task.cancel\n  }\n\n  function cancelAll() {\n    if (completed) {\n      return;\n    }\n    completed = true;\n    tasks.forEach(function (t) {\n      t.cont = noop;\n      t.cancel();\n    });\n    tasks = [];\n  }\n\n  return {\n    addTask: addTask,\n    cancelAll: cancelAll,\n    abort: abort,\n    getTasks: function getTasks() {\n      return tasks;\n    },\n    taskNames: function taskNames() {\n      return tasks.map(function (t) {\n        return t.name;\n      });\n    }\n  };\n}\n\nfunction createTaskIterator(_ref) {\n  var context = _ref.context,\n      fn = _ref.fn,\n      args = _ref.args;\n\n  if (is.iterator(fn)) {\n    return fn;\n  }\n\n  // catch synchronous failures; see #152 and #441\n  var result = void 0,\n      error = void 0;\n  try {\n    result = fn.apply(context, args);\n  } catch (err) {\n    error = err;\n  }\n\n  // i.e. a generator function returns an iterator\n  if (is.iterator(result)) {\n    return result;\n  }\n\n  // do not bubble up synchronous failures for detached forks\n  // instead create a failed task. See #152 and #441\n  return error ? makeIterator(function () {\n    throw error;\n  }) : makeIterator(function () {\n    var pc = void 0;\n    var eff = { done: false, value: result };\n    var ret = function ret(value) {\n      return { done: true, value: value };\n    };\n    return function (arg) {\n      if (!pc) {\n        pc = true;\n        return eff;\n      } else {\n        return ret(arg);\n      }\n    };\n  }());\n}\n\nvar wrapHelper = function wrapHelper(helper) {\n  return { fn: helper };\n};\n\nexport default function proc(iterator) {\n  var subscribe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n    return noop;\n  };\n  var dispatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n  var getState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;\n  var parentContext = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  var parentEffectId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  var name = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'anonymous';\n  var cont = arguments[8];\n\n  check(iterator, is.iterator, NOT_ITERATOR_ERROR);\n\n  var effectsString = '[...effects]';\n  var runParallelEffect = deprecate(runAllEffect, updateIncentive(effectsString, 'all(' + effectsString + ')'));\n\n  var sagaMonitor = options.sagaMonitor,\n      logger = options.logger,\n      onError = options.onError;\n\n  var log = logger || _log;\n  var logError = function logError(err) {\n    var message = err.sagaStack;\n\n    if (!message && err.stack) {\n      message = err.stack.split('\\n')[0].indexOf(err.message) !== -1 ? err.stack : 'Error: ' + err.message + '\\n' + err.stack;\n    }\n\n    log('error', 'uncaught at ' + name, message || err.message || err);\n  };\n  var stdChannel = _stdChannel(subscribe);\n  var taskContext = Object.create(parentContext);\n  /**\n    Tracks the current effect cancellation\n    Each time the generator progresses. calling runEffect will set a new value\n    on it. It allows propagating cancellation to child effects\n  **/\n  next.cancel = noop;\n\n  /**\n    Creates a new task descriptor for this generator, We'll also create a main task\n    to track the main flow (besides other forked tasks)\n  **/\n  var task = newTask(parentEffectId, name, iterator, cont);\n  var mainTask = { name: name, cancel: cancelMain, isRunning: true };\n  var taskQueue = forkQueue(name, mainTask, end);\n\n  /**\n    cancellation of the main task. We'll simply resume the Generator with a Cancel\n  **/\n  function cancelMain() {\n    if (mainTask.isRunning && !mainTask.isCancelled) {\n      mainTask.isCancelled = true;\n      next(TASK_CANCEL);\n    }\n  }\n\n  /**\n    This may be called by a parent generator to trigger/propagate cancellation\n    cancel all pending tasks (including the main task), then end the current task.\n     Cancellation propagates down to the whole execution tree holded by this Parent task\n    It's also propagated to all joiners of this task and their execution tree/joiners\n     Cancellation is noop for terminated/Cancelled tasks tasks\n  **/\n  function cancel() {\n    /**\n      We need to check both Running and Cancelled status\n      Tasks can be Cancelled but still Running\n    **/\n    if (iterator._isRunning && !iterator._isCancelled) {\n      iterator._isCancelled = true;\n      taskQueue.cancelAll();\n      /**\n        Ending with a Never result will propagate the Cancellation to all joiners\n      **/\n      end(TASK_CANCEL);\n    }\n  }\n  /**\n    attaches cancellation logic to this task's continuation\n    this will permit cancellation to propagate down the call chain\n  **/\n  cont && (cont.cancel = cancel);\n\n  // tracks the running status\n  iterator._isRunning = true;\n\n  // kicks up the generator\n  next();\n\n  // then return the task descriptor to the caller\n  return task;\n\n  /**\n    This is the generator driver\n    It's a recursive async/continuation function which calls itself\n    until the generator terminates or throws\n  **/\n  function next(arg, isErr) {\n    // Preventive measure. If we end up here, then there is really something wrong\n    if (!mainTask.isRunning) {\n      throw new Error('Trying to resume an already finished generator');\n    }\n\n    try {\n      var result = void 0;\n      if (isErr) {\n        result = iterator.throw(arg);\n      } else if (arg === TASK_CANCEL) {\n        /**\n          getting TASK_CANCEL automatically cancels the main task\n          We can get this value here\n           - By cancelling the parent task manually\n          - By joining a Cancelled task\n        **/\n        mainTask.isCancelled = true;\n        /**\n          Cancels the current effect; this will propagate the cancellation down to any called tasks\n        **/\n        next.cancel();\n        /**\n          If this Generator has a `return` method then invokes it\n          This will jump to the finally block\n        **/\n        result = is.func(iterator.return) ? iterator.return(TASK_CANCEL) : { done: true, value: TASK_CANCEL };\n      } else if (arg === CHANNEL_END) {\n        // We get CHANNEL_END by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)\n        result = is.func(iterator.return) ? iterator.return() : { done: true };\n      } else {\n        result = iterator.next(arg);\n      }\n\n      if (!result.done) {\n        runEffect(result.value, parentEffectId, '', next);\n      } else {\n        /**\n          This Generator has ended, terminate the main task and notify the fork queue\n        **/\n        mainTask.isMainRunning = false;\n        mainTask.cont && mainTask.cont(result.value);\n      }\n    } catch (error) {\n      if (mainTask.isCancelled) {\n        logError(error);\n      }\n      mainTask.isMainRunning = false;\n      mainTask.cont(error, true);\n    }\n  }\n\n  function end(result, isErr) {\n    iterator._isRunning = false;\n    stdChannel.close();\n    if (!isErr) {\n      iterator._result = result;\n      iterator._deferredEnd && iterator._deferredEnd.resolve(result);\n    } else {\n      if (result instanceof Error) {\n        Object.defineProperty(result, 'sagaStack', {\n          value: 'at ' + name + ' \\n ' + (result.sagaStack || result.stack),\n          configurable: true\n        });\n      }\n      if (!task.cont) {\n        if (result instanceof Error && onError) {\n          onError(result);\n        } else {\n          logError(result);\n        }\n      }\n      iterator._error = result;\n      iterator._isAborted = true;\n      iterator._deferredEnd && iterator._deferredEnd.reject(result);\n    }\n    task.cont && task.cont(result, isErr);\n    task.joiners.forEach(function (j) {\n      return j.cb(result, isErr);\n    });\n    task.joiners = null;\n  }\n\n  function runEffect(effect, parentEffectId) {\n    var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var cb = arguments[3];\n\n    var effectId = nextEffectId();\n    sagaMonitor && sagaMonitor.effectTriggered({ effectId: effectId, parentEffectId: parentEffectId, label: label, effect: effect });\n\n    /**\n      completion callback and cancel callback are mutually exclusive\n      We can't cancel an already completed effect\n      And We can't complete an already cancelled effectId\n    **/\n    var effectSettled = void 0;\n\n    // Completion callback passed to the appropriate effect runner\n    function currCb(res, isErr) {\n      if (effectSettled) {\n        return;\n      }\n\n      effectSettled = true;\n      cb.cancel = noop; // defensive measure\n      if (sagaMonitor) {\n        isErr ? sagaMonitor.effectRejected(effectId, res) : sagaMonitor.effectResolved(effectId, res);\n      }\n      cb(res, isErr);\n    }\n    // tracks down the current cancel\n    currCb.cancel = noop;\n\n    // setup cancellation logic on the parent cb\n    cb.cancel = function () {\n      // prevents cancelling an already completed effect\n      if (effectSettled) {\n        return;\n      }\n\n      effectSettled = true;\n      /**\n        propagates cancel downward\n        catch uncaught cancellations errors; since we can no longer call the completion\n        callback, log errors raised during cancellations into the console\n      **/\n      try {\n        currCb.cancel();\n      } catch (err) {\n        logError(err);\n      }\n      currCb.cancel = noop; // defensive measure\n\n      sagaMonitor && sagaMonitor.effectCancelled(effectId);\n    };\n\n    /**\n      each effect runner must attach its own logic of cancellation to the provided callback\n      it allows this generator to propagate cancellation downward.\n       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]\n      And the setup must occur before calling the callback\n       This is a sort of inversion of control: called async functions are responsible\n      for completing the flow by calling the provided continuation; while caller functions\n      are responsible for aborting the current flow by calling the attached cancel function\n       Library users can attach their own cancellation logic to promises by defining a\n      promise[CANCEL] method in their returned promises\n      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect\n    **/\n    var data = void 0;\n    // prettier-ignore\n    return (\n      // Non declarative effect\n      is.promise(effect) ? resolvePromise(effect, currCb) : is.helper(effect) ? runForkEffect(wrapHelper(effect), effectId, currCb) : is.iterator(effect) ? resolveIterator(effect, effectId, name, currCb)\n\n      // declarative effects\n      : is.array(effect) ? runParallelEffect(effect, effectId, currCb) : (data = asEffect.take(effect)) ? runTakeEffect(data, currCb) : (data = asEffect.put(effect)) ? runPutEffect(data, currCb) : (data = asEffect.all(effect)) ? runAllEffect(data, effectId, currCb) : (data = asEffect.race(effect)) ? runRaceEffect(data, effectId, currCb) : (data = asEffect.call(effect)) ? runCallEffect(data, effectId, currCb) : (data = asEffect.cps(effect)) ? runCPSEffect(data, currCb) : (data = asEffect.fork(effect)) ? runForkEffect(data, effectId, currCb) : (data = asEffect.join(effect)) ? runJoinEffect(data, currCb) : (data = asEffect.cancel(effect)) ? runCancelEffect(data, currCb) : (data = asEffect.select(effect)) ? runSelectEffect(data, currCb) : (data = asEffect.actionChannel(effect)) ? runChannelEffect(data, currCb) : (data = asEffect.flush(effect)) ? runFlushEffect(data, currCb) : (data = asEffect.cancelled(effect)) ? runCancelledEffect(data, currCb) : (data = asEffect.getContext(effect)) ? runGetContextEffect(data, currCb) : (data = asEffect.setContext(effect)) ? runSetContextEffect(data, currCb) : /* anything else returned as is */currCb(effect)\n    );\n  }\n\n  function resolvePromise(promise, cb) {\n    var cancelPromise = promise[CANCEL];\n    if (is.func(cancelPromise)) {\n      cb.cancel = cancelPromise;\n    } else if (is.func(promise.abort)) {\n      cb.cancel = function () {\n        return promise.abort();\n      };\n      // TODO: add support for the fetch API, whenever they get around to\n      // adding cancel support\n    }\n    promise.then(cb, function (error) {\n      return cb(error, true);\n    });\n  }\n\n  function resolveIterator(iterator, effectId, name, cb) {\n    proc(iterator, subscribe, dispatch, getState, taskContext, options, effectId, name, cb);\n  }\n\n  function runTakeEffect(_ref2, cb) {\n    var channel = _ref2.channel,\n        pattern = _ref2.pattern,\n        maybe = _ref2.maybe;\n\n    channel = channel || stdChannel;\n    var takeCb = function takeCb(inp) {\n      return inp instanceof Error ? cb(inp, true) : isEnd(inp) && !maybe ? cb(CHANNEL_END) : cb(inp);\n    };\n    try {\n      channel.take(takeCb, matcher(pattern));\n    } catch (err) {\n      return cb(err, true);\n    }\n    cb.cancel = takeCb.cancel;\n  }\n\n  function runPutEffect(_ref3, cb) {\n    var channel = _ref3.channel,\n        action = _ref3.action,\n        resolve = _ref3.resolve;\n\n    /**\n      Schedule the put in case another saga is holding a lock.\n      The put will be executed atomically. ie nested puts will execute after\n      this put has terminated.\n    **/\n    asap(function () {\n      var result = void 0;\n      try {\n        result = (channel ? channel.put : dispatch)(action);\n      } catch (error) {\n        // If we have a channel or `put.resolve` was used then bubble up the error.\n        if (channel || resolve) return cb(error, true);\n        logError(error);\n      }\n\n      if (resolve && is.promise(result)) {\n        resolvePromise(result, cb);\n      } else {\n        return cb(result);\n      }\n    });\n    // Put effects are non cancellables\n  }\n\n  function runCallEffect(_ref4, effectId, cb) {\n    var context = _ref4.context,\n        fn = _ref4.fn,\n        args = _ref4.args;\n\n    var result = void 0;\n    // catch synchronous failures; see #152\n    try {\n      result = fn.apply(context, args);\n    } catch (error) {\n      return cb(error, true);\n    }\n    return is.promise(result) ? resolvePromise(result, cb) : is.iterator(result) ? resolveIterator(result, effectId, fn.name, cb) : cb(result);\n  }\n\n  function runCPSEffect(_ref5, cb) {\n    var context = _ref5.context,\n        fn = _ref5.fn,\n        args = _ref5.args;\n\n    // CPS (ie node style functions) can define their own cancellation logic\n    // by setting cancel field on the cb\n\n    // catch synchronous failures; see #152\n    try {\n      var cpsCb = function cpsCb(err, res) {\n        return is.undef(err) ? cb(res) : cb(err, true);\n      };\n      fn.apply(context, args.concat(cpsCb));\n      if (cpsCb.cancel) {\n        cb.cancel = function () {\n          return cpsCb.cancel();\n        };\n      }\n    } catch (error) {\n      return cb(error, true);\n    }\n  }\n\n  function runForkEffect(_ref6, effectId, cb) {\n    var context = _ref6.context,\n        fn = _ref6.fn,\n        args = _ref6.args,\n        detached = _ref6.detached;\n\n    var taskIterator = createTaskIterator({ context: context, fn: fn, args: args });\n\n    try {\n      suspend();\n      var _task = proc(taskIterator, subscribe, dispatch, getState, taskContext, options, effectId, fn.name, detached ? null : noop);\n\n      if (detached) {\n        cb(_task);\n      } else {\n        if (taskIterator._isRunning) {\n          taskQueue.addTask(_task);\n          cb(_task);\n        } else if (taskIterator._error) {\n          taskQueue.abort(taskIterator._error);\n        } else {\n          cb(_task);\n        }\n      }\n    } finally {\n      flush();\n    }\n    // Fork effects are non cancellables\n  }\n\n  function runJoinEffect(t, cb) {\n    if (t.isRunning()) {\n      var joiner = { task: task, cb: cb };\n      cb.cancel = function () {\n        return remove(t.joiners, joiner);\n      };\n      t.joiners.push(joiner);\n    } else {\n      t.isAborted() ? cb(t.error(), true) : cb(t.result());\n    }\n  }\n\n  function runCancelEffect(taskToCancel, cb) {\n    if (taskToCancel === SELF_CANCELLATION) {\n      taskToCancel = task;\n    }\n    if (taskToCancel.isRunning()) {\n      taskToCancel.cancel();\n    }\n    cb();\n    // cancel effects are non cancellables\n  }\n\n  function runAllEffect(effects, effectId, cb) {\n    var keys = Object.keys(effects);\n\n    if (!keys.length) {\n      return cb(is.array(effects) ? [] : {});\n    }\n\n    var completedCount = 0;\n    var completed = void 0;\n    var results = {};\n    var childCbs = {};\n\n    function checkEffectEnd() {\n      if (completedCount === keys.length) {\n        completed = true;\n        cb(is.array(effects) ? array.from(_extends({}, results, { length: keys.length })) : results);\n      }\n    }\n\n    keys.forEach(function (key) {\n      var chCbAtKey = function chCbAtKey(res, isErr) {\n        if (completed) {\n          return;\n        }\n        if (isErr || isEnd(res) || res === CHANNEL_END || res === TASK_CANCEL) {\n          cb.cancel();\n          cb(res, isErr);\n        } else {\n          results[key] = res;\n          completedCount++;\n          checkEffectEnd();\n        }\n      };\n      chCbAtKey.cancel = noop;\n      childCbs[key] = chCbAtKey;\n    });\n\n    cb.cancel = function () {\n      if (!completed) {\n        completed = true;\n        keys.forEach(function (key) {\n          return childCbs[key].cancel();\n        });\n      }\n    };\n\n    keys.forEach(function (key) {\n      return runEffect(effects[key], effectId, key, childCbs[key]);\n    });\n  }\n\n  function runRaceEffect(effects, effectId, cb) {\n    var completed = void 0;\n    var keys = Object.keys(effects);\n    var childCbs = {};\n\n    keys.forEach(function (key) {\n      var chCbAtKey = function chCbAtKey(res, isErr) {\n        if (completed) {\n          return;\n        }\n\n        if (isErr) {\n          // Race Auto cancellation\n          cb.cancel();\n          cb(res, true);\n        } else if (!isEnd(res) && res !== CHANNEL_END && res !== TASK_CANCEL) {\n          var _response;\n\n          cb.cancel();\n          completed = true;\n          var response = (_response = {}, _response[key] = res, _response);\n          cb(is.array(effects) ? [].slice.call(_extends({}, response, { length: keys.length })) : response);\n        }\n      };\n      chCbAtKey.cancel = noop;\n      childCbs[key] = chCbAtKey;\n    });\n\n    cb.cancel = function () {\n      // prevents unnecessary cancellation\n      if (!completed) {\n        completed = true;\n        keys.forEach(function (key) {\n          return childCbs[key].cancel();\n        });\n      }\n    };\n    keys.forEach(function (key) {\n      if (completed) {\n        return;\n      }\n      runEffect(effects[key], effectId, key, childCbs[key]);\n    });\n  }\n\n  function runSelectEffect(_ref7, cb) {\n    var selector = _ref7.selector,\n        args = _ref7.args;\n\n    try {\n      var state = selector.apply(undefined, [getState()].concat(args));\n      cb(state);\n    } catch (error) {\n      cb(error, true);\n    }\n  }\n\n  function runChannelEffect(_ref8, cb) {\n    var pattern = _ref8.pattern,\n        buffer = _ref8.buffer;\n\n    var match = matcher(pattern);\n    match.pattern = pattern;\n    cb(eventChannel(subscribe, buffer || buffers.fixed(), match));\n  }\n\n  function runCancelledEffect(data, cb) {\n    cb(!!mainTask.isCancelled);\n  }\n\n  function runFlushEffect(channel, cb) {\n    channel.flush(cb);\n  }\n\n  function runGetContextEffect(prop, cb) {\n    cb(taskContext[prop]);\n  }\n\n  function runSetContextEffect(props, cb) {\n    object.assign(taskContext, props);\n    cb();\n  }\n\n  function newTask(id, name, iterator, cont) {\n    var _done, _ref9, _mutatorMap;\n\n    iterator._deferredEnd = null;\n    return _ref9 = {}, _ref9[TASK] = true, _ref9.id = id, _ref9.name = name, _done = 'done', _mutatorMap = {}, _mutatorMap[_done] = _mutatorMap[_done] || {}, _mutatorMap[_done].get = function () {\n      if (iterator._deferredEnd) {\n        return iterator._deferredEnd.promise;\n      } else {\n        var def = deferred();\n        iterator._deferredEnd = def;\n        if (!iterator._isRunning) {\n          iterator._error ? def.reject(iterator._error) : def.resolve(iterator._result);\n        }\n        return def.promise;\n      }\n    }, _ref9.cont = cont, _ref9.joiners = [], _ref9.cancel = cancel, _ref9.isRunning = function isRunning() {\n      return iterator._isRunning;\n    }, _ref9.isCancelled = function isCancelled() {\n      return iterator._isCancelled;\n    }, _ref9.isAborted = function isAborted() {\n      return iterator._isAborted;\n    }, _ref9.result = function result() {\n      return iterator._result;\n    }, _ref9.error = function error() {\n      return iterator._error;\n    }, _ref9.setContext = function setContext(props) {\n      check(props, is.object, createSetContextWarning('task', props));\n      object.assign(taskContext, props);\n    }, _defineEnumerableProperties(_ref9, _mutatorMap), _ref9;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}