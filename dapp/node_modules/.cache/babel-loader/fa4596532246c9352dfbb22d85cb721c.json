{"ast":null,"code":"var _jsxFileName = \"/home/pablo/Desktop/DAO/dapp/src/components/ipfs/watchipfs.js\",\n  _s = $RefreshSig$();\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport Oneipfs from './oneipfs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useDrizzle,\n  useDrizzleState\n} = drizzleReactHooks;\nconst Watchipfs = ({\n  children\n}) => {\n  _s();\n  const {\n    useCacheCall\n  } = useDrizzle();\n  const drizzleState = useDrizzleState(state => state);\n  const address = drizzleState.accounts[0];\n  //  const balance = drizzleState.accountBalances[address];\n\n  //Obtenemos los ids de los tokens que tiene este usuario\n  const nftsid = useCacheCall(\"NFTContract\", \"getNFTsByOwner\", address);\n\n  // Utiliza el método map para separar cada valor y llamar al componente oneipfs\n  const renderedRows = nftsidArray.map((nftsid, index) => /*#__PURE__*/_jsxDEV(Oneipfs, {\n    nftsid: index\n  }, \"ab-\" + index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: renderedRows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n_s(Watchipfs, \"7rJ38vANmOX+76JMeko1XZMwZSc=\", true, function () {\n  return [useDrizzle, useDrizzleState];\n});\n_c = Watchipfs;\nexport default Watchipfs;\nvar _c;\n$RefreshReg$(_c, \"Watchipfs\");","map":{"version":3,"names":["drizzleReactHooks","Oneipfs","jsxDEV","_jsxDEV","useDrizzle","useDrizzleState","Watchipfs","children","_s","useCacheCall","drizzleState","state","address","accounts","nftsid","renderedRows","nftsidArray","map","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/pablo/Desktop/DAO/dapp/src/components/ipfs/watchipfs.js"],"sourcesContent":["import {drizzleReactHooks} from '@drizzle/react-plugin'\nimport Oneipfs from './oneipfs';\nconst {useDrizzle, useDrizzleState} = drizzleReactHooks;\n\n\n\n\nconst Watchipfs = ({children}) => {\n    const {useCacheCall} = useDrizzle();\n    const drizzleState = useDrizzleState(state => state);\n\n    const address = drizzleState.accounts[0];\n  //  const balance = drizzleState.accountBalances[address];\n  \n    //Obtenemos los ids de los tokens que tiene este usuario\n    const nftsid = useCacheCall(\"NFTContract\", \"getNFTsByOwner\", address);\n\n  // Utiliza el método map para separar cada valor y llamar al componente oneipfs\n  const renderedRows = nftsidArray.map((nftsid, index) => (\n    <Oneipfs key={\"ab-\" + index} nftsid={index} />\n  ));\n\n  return <tbody>{renderedRows}</tbody>;\n};\n \nexport default Watchipfs;"],"mappings":";;AAAA,SAAQA,iBAAiB,QAAO,uBAAuB;AACvD,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChC,MAAM;EAACC,UAAU;EAAEC;AAAe,CAAC,GAAGL,iBAAiB;AAKvD,MAAMM,SAAS,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM;IAACC;EAAY,CAAC,GAAGL,UAAU,CAAC,CAAC;EACnC,MAAMM,YAAY,GAAGL,eAAe,CAACM,KAAK,IAAIA,KAAK,CAAC;EAEpD,MAAMC,OAAO,GAAGF,YAAY,CAACG,QAAQ,CAAC,CAAC,CAAC;EAC1C;;EAEE;EACA,MAAMC,MAAM,GAAGL,YAAY,CAAC,aAAa,EAAE,gBAAgB,EAAEG,OAAO,CAAC;;EAEvE;EACA,MAAMG,YAAY,GAAGC,WAAW,CAACC,GAAG,CAAC,CAACH,MAAM,EAAEI,KAAK,kBACjDf,OAAA,CAACF,OAAO;IAAqBa,MAAM,EAAEI;EAAM,GAA7B,KAAK,GAAGA,KAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAkB,CAC9C,CAAC;EAEF,oBAAOnB,OAAA;IAAAI,QAAA,EAAQQ;EAAY;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACtC,CAAC;AAACd,EAAA,CAhBIF,SAAS;EAAA,QACYF,UAAU,EACZC,eAAe;AAAA;AAAAkB,EAAA,GAFlCjB,SAAS;AAkBf,eAAeA,SAAS;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}