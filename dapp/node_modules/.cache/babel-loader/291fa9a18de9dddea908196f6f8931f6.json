{"ast":null,"code":"var _s = $RefreshSig$();\nimport { drizzleReactHooks } from '@drizzle/react-plugin';\nimport React, { useEffect } from 'react';\nconst {\n  useDrizzle\n} = drizzleReactHooks;\nconst ADMINCompanyRow = ({\n  TraductorIndex,\n  onDataChange\n}) => {\n  _s();\n  const {\n    useCacheCall\n  } = useDrizzle();\n  const {\n    addr,\n    datos,\n    tokens\n  } = useCacheCall(['Traductores'], call => {\n    const addr = call(\"Traductores\", \"companies\", TraductorIndex);\n    const datos = addr && call(\"Traductores\", \"datosCompanies\", addr);\n    const tokens = addr && datos && call(\"GovernanceToken\", \"balanceOf\", addr);\n    return {\n      addr,\n      datos,\n      tokens\n    };\n  });\n  useEffect(() => {\n    if (addr && datos && tokens) {\n      onDataChange(TraductorIndex, datos, addr, tokens);\n    }\n  }, [TraductorIndex, addr, datos, tokens, onDataChange]);\n\n  // Rest of the component logic...\n};\n_s(ADMINCompanyRow, \"u/5rU5BQz2XSczXuPdF1BoAhsgk=\", true, function () {\n  return [useDrizzle];\n});\n_c = ADMINCompanyRow;\nexport default ADMINCompanyRow;\nvar _c;\n$RefreshReg$(_c, \"ADMINCompanyRow\");","map":{"version":3,"names":["drizzleReactHooks","React","useEffect","useDrizzle","ADMINCompanyRow","TraductorIndex","onDataChange","_s","useCacheCall","addr","datos","tokens","call","_c","$RefreshReg$"],"sources":["/home/pablo/Desktop/DAO/dapp/src/components/company/Companydelete/ADMINCompanyRow.js"],"sourcesContent":["import { drizzleReactHooks } from '@drizzle/react-plugin';\nimport React, { useEffect } from 'react';\n\nconst { useDrizzle } = drizzleReactHooks;\n\nconst ADMINCompanyRow = ({ TraductorIndex, onDataChange }) => {\n  const { useCacheCall } = useDrizzle();\n\n  const { addr, datos, tokens } = useCacheCall(['Traductores'], (call) => {\n    const addr = call(\"Traductores\", \"companies\", TraductorIndex);\n    const datos = addr && call(\"Traductores\", \"datosCompanies\", addr);\n    const tokens = addr && datos && call(\"GovernanceToken\", \"balanceOf\", addr);\n    return { addr, datos, tokens };\n  });\n\n  useEffect(() => {\n    if (addr && datos && tokens) {\n      onDataChange(TraductorIndex, datos, addr, tokens);\n    }\n  }, [TraductorIndex, addr, datos, tokens, onDataChange]);\n\n  // Rest of the component logic...\n};\n\nexport default ADMINCompanyRow;\n"],"mappings":";AAAA,SAASA,iBAAiB,QAAQ,uBAAuB;AACzD,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,MAAM;EAAEC;AAAW,CAAC,GAAGH,iBAAiB;AAExC,MAAMI,eAAe,GAAGA,CAAC;EAAEC,cAAc;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAM;IAAEC;EAAa,CAAC,GAAGL,UAAU,CAAC,CAAC;EAErC,MAAM;IAAEM,IAAI;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGH,YAAY,CAAC,CAAC,aAAa,CAAC,EAAGI,IAAI,IAAK;IACtE,MAAMH,IAAI,GAAGG,IAAI,CAAC,aAAa,EAAE,WAAW,EAAEP,cAAc,CAAC;IAC7D,MAAMK,KAAK,GAAGD,IAAI,IAAIG,IAAI,CAAC,aAAa,EAAE,gBAAgB,EAAEH,IAAI,CAAC;IACjE,MAAME,MAAM,GAAGF,IAAI,IAAIC,KAAK,IAAIE,IAAI,CAAC,iBAAiB,EAAE,WAAW,EAAEH,IAAI,CAAC;IAC1E,OAAO;MAAEA,IAAI;MAAEC,KAAK;MAAEC;IAAO,CAAC;EAChC,CAAC,CAAC;EAEFT,SAAS,CAAC,MAAM;IACd,IAAIO,IAAI,IAAIC,KAAK,IAAIC,MAAM,EAAE;MAC3BL,YAAY,CAACD,cAAc,EAAEK,KAAK,EAAED,IAAI,EAAEE,MAAM,CAAC;IACnD;EACF,CAAC,EAAE,CAACN,cAAc,EAAEI,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEL,YAAY,CAAC,CAAC;;EAEvD;AACF,CAAC;AAACC,EAAA,CAjBIH,eAAe;EAAA,QACMD,UAAU;AAAA;AAAAU,EAAA,GAD/BT,eAAe;AAmBrB,eAAeA,eAAe;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}